[{"url":"cheatsheets/","title":"Cheatsheets","tags":["welcome"],"text":"Cheatsheets Getting Started with Julia - live . Fastrack to Julia  cheatsheet. MATLAB-Julia-Python comparative cheatsheet  by  QuantEcon group Plots.jl cheatsheet"},{"url":".","title":"index","tags":["homepage"],"text":""},{"url":"installation/","title":"Software installation","tags":["welcome"],"text":"First-time setup: Install Julia & Pluto Text and pictures version: Step 1: Install Julia  1.8.2 Go to  https://julialang.org/downloads  and download the current stable release, Julia  1.8.2 , using the correct version for your operating system (Linux x86, Mac, Windows, etc). Step 2: Run Julia After installing,  make sure that you can run Julia . On some systems, this means searching for the “Julia  1.8.2 ” program installed on your computer; in others, it means running the command  julia  in a terminal. Make sure that you can execute  1 + 1 : Make sure that you are able to launch Julia and calculate  1+1  before proceeding! Step 3: Install  Pluto Next we will install the  Pluto , the notebook environment that we will be using during the course. Pluto is a Julia  programming environment  designed for interactivity and quick experiments. Open the  Julia REPL . This is the command-line interface to Julia, similar to the previous screenshot. Here you type  Julia commands , and when you press ENTER, it runs, and you see the result. To install Pluto, we want to run a  package manager command . To switch from  Julia  mode to  Pkg  mode, type  ]  (closing square bracket) at the  julia>  prompt: \njulia> ]\n\n(@v 1.8 ) pkg>\n The line turns blue and the prompt changes to  pkg> , telling you that you are now in  package manager mode . This mode allows you to do operations on  packages  (also called libraries). To install Pluto, run the following (case sensitive) command to  add  (install) the package to your system by downloading it from the internet.\nYou should only need to do this  once  for each installation of Julia: \n(@v 1.8 ) pkg> add Pluto\n This might take a couple of minutes, so you can go get yourself a cup of tea! You can now close the terminal. Step 4: Use a modern browser: Mozilla Firefox or Google Chrome We need a modern browser to view Pluto notebooks with. Firefox and Chrome work best. Second time:  Running Pluto & opening a notebook Repeat the following steps whenever you want to work on a project or homework assignment. Step 1: Start Pluto Start the Julia REPL, like you did during the setup. In the REPL, type: julia> using Pluto\n\njulia> Pluto.run()\n The terminal tells us to go to  http://localhost:1234/  (or a similar URL). Let’s open Firefox or Chrome and type that into the address bar. If you’re curious about what a  Pluto notebook  looks like, have a look at the  Featured Notebooks . These notebooks are useful for learning some basics of Julia programming. If you want to hear the story behind Pluto, have a look a the  JuliaCon presentation . If nothing happens in the browser the first time, close Julia and try again. And please let us know! Step 2a: Opening a notebook from the web This is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a  template notebook , available in this GitHub repository. To start from a template notebook on the web, you can  paste the URL into the blue box  and press ENTER. For example, homework 0 is available  here . Go to this page, and on the top right, click on the button that says “Edit or run this notebook”. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box. The first thing we will want to do is to save the notebook somewhere on our own computer; see below. Step 2b: Opening an existing notebook file When you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off. If you want to run a local notebook file that you have not opened before, then you need to enter its  full path  into the blue box in the main menu. More on finding full paths in step 3. Step 3: Saving a notebook We first need a folder to save our homework in. Open your file explorer and create one. Next, we need to know the  absolute path  of that folder. Here’s how you do that in  Windows ,  MacOS  and  Ubuntu . For example, you might have: C:\\Users\\fons\\Documents\\18S191_assignments\\  on Windows /Users/fons/Documents/18S191_assignments/  on MacOS /home/fons/Documents/18S191_assignments/  on Ubuntu Now that we know the absolute path, go back to your Pluto notebook, and at the top of the page, click on  “Save notebook…” . This is where you type the  new path+filename for your notebook : Click  Choose . Step 4: Sharing a notebook After working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas. \nconst run = f => f();\nrun(async () => {\nconst versions = await (await fetch(`https://julialang-s3.julialang.org/bin/versions.json`)).json()\nconst version_names = Object.keys(versions).sort().reverse()\nconst stable = version_names.find(v => versions[v].stable)\nconsole.log({stable})\nconst pkg_stable = /\\d+\\.\\d+/.exec(stable)[0]\ndocument.querySelectorAll(\"auto-julia-version\").forEach(el => {\n    console.log(el)\n    el.innerText = el.getAttribute(\"short\") == null ? stable : pkg_stable\n})\n});"},{"url":"logistics/","title":"Class logistics","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n Course logistics Describe here the logistics of your class."},{"url":"search/","title":"Search results","tags":[],"text":"window.init_search(); Search Results \nLoading..."},{"url":"assets/scripts/get_highlights/","title":"get_highlights","tags":[],"text":"if isempty get metadata \"homepage\" , \"highlights\", nothing else highlights htl \"\"\" section div class \"content\" h2 x \"name\" h2 p x \"text\" p div div class \"preview\" img src \" x \"img\" \" div section \"\"\" for x in metadata \"homepage\" \"highlights\" htl \"\"\" div class \"subjectscontainer wide\" h1 Highlights h1 div class \"contain\" highlights div div \"\"\" end"},{"url":"assets/scripts/get_subjects/","title":"get_subjects","tags":[],"text":"let sections metadata \"sidebar\" sections htl \"\"\" let input other page.input output other page.output name get output.frontmatter, \"title\", basename input.relative path desc get output.frontmatter, \"description\", nothing tags get output.frontmatter, \"tags\", String image get output.frontmatter, \"image\", nothing class \"no decoration\", \"tag replace x, \" \" \" \" \" for x in tags ..., image nothing || isempty image ? nothing htl \"\"\" a title desc class class href root url \" \" other page.url h3 name h3 img src image a \"\"\" end for other page in collections section id .pages \"\"\" for section id, section name in sections isempty sections ? nothing htl \"\"\" div class \"wide subjectscontainer\" h1 Subjects h1 div class \"subjects\" sections div div \"\"\" end"},{"url":"homework/hw1/","title":"sample homework","tags":["module2","track_julia","track_material","homeworks","pluto","PlutoTeachingTools"],"text":" A Pluto.jl notebook v0.19.25 frontmatter homework number \"1\" order \"2.5\" title \"sample homework\" tags \"module2\", \"track julia\", \"track material\", \"homeworks\", \"pluto\", \"PlutoTeachingTools\" layout \"layout.jlhtml\" description \"sample howework\" using Markdown using InteractiveUtils using PlutoTeachingTools, PlutoUI md\"\"\" Sample Homework This notebook showcases some of the features of `PlutoTeachingTools.jl` https github.com JuliaPluto PlutoTeachingTools.jl and how to use these to write homework assignment in Pluto. \"\"\" tip md\"\"\"For a deeper tour of `PlutoTeachingTools.jl`, check their documentation https juliapluto.github.io PlutoTeachingTools.jl example.html \"\"\" md\"\"\" Useful functionalities `PlutoTeachingTools.jl` has some functions like `correct`, `still missing`, here a few demoes \"\"\" correct still missing keep working keep working md\"you can also give custom text to the boxes\" hint md\"this is a hint, hover the box to unblur the text\" md\"\"\" Exercise 1 a simple exercise Replace missing with the value `1`. \"\"\" x missing if ismissing x still missing elseif x 1 && x isa Int correct elseif x 1 && x isa Int b1 almost md\"\"\"Your variable has the right value, but it's not quite the right answer. Read carefully the instructions\"\"\" b2 hint md\"\"\"What type should the value of x be?\"\"\" md\"\"\" b1 b2 \"\"\" else keep working md\"\"\"That is not the right answer Keep trying \"\"\" end md\"\"\" here is a short demo of how it looks like when the student tries to solve the exercise \"\"\" Resource \"https user images.githubusercontent.com 49938764 249749643 8cc12de3 2b50 4182 b95d 686c2c18332c.mov\", width 500, autoplay \"\", loop \"\" md\"\"\" Exercise 2 Write a function called `myfun` that takes as input an integer and returns its square. Define a variable called `y` and assign `myfun 3 ` to it. \"\"\" let if isdefined myfun func not defined myfun else test values 1, 2, 3, 4, 5 msg1 correct for t in test values if myfun t t^2 msg1 keep working md\"Test failed for input t, expected t^2 , but got myfun t \" break end end msg1 end end if isdefined y var not defined y elseif y 9 correct else keep working md\"Evaluated expression y y is incorrect.\" end md\"\"\" and here is a quick demo of the exercise in action \"\"\" Resource \"https user images.githubusercontent.com 49938764 249748007 d0b2d773 6b21 49d4 89db ad737af510fe.mov\", width 500, autoplay \"\", loop \"\" "},{"url":"mod1_setup_website/basic_info/","title":"Fill course basic information","tags":["module1","track_setup","teaching","metadata"],"text":"Add basic information If you look at the homepage of the template website, you will see it has a bunch of placeholder text, such as “name of your course”, “a short catchy phrase” etc. To customize this, you will need to customize the  metadata  of the website. That is, add basic info for your class. To do so, you will need to fill the info in the files under the folder  src/_data . Let us analyze these one by one. course_info.jl This file contains a julia  Dict  with the basic info of the class. For each key ( course_name ,  course_subtitle , etc.) replace the corresponding placeholder with an appropriate text for your class. When filling the  institution_logo  data with the name of your university logo file, do not forget to actually put the file under  src/assets . Authors are listed as a vector of pairs, where the first element is the author name and the second is their homepage address. If you dont have a homepage address for the author, put an empty string  \"\" . homepage.jl This file contains metadata for the info displayed in the homepage, particularly title : the title displayed on top of the homepage disclaimer : the disclaimer displayed below the title. If you don’t want a disclaimer, you can remove this entry. highlights : in this entry you can specify the highlights of your class, which will be displayed on the homepage. This entry should be a vector of highlights. Each entry in the vector should be a dict with the following fields\n name : the title of the highlight text : short description of the highlight img : link to an image summarizing the highlight sidebar.jl In this file you can specify the sidebar of the website. All lecture materials will be grouped in  modules  in the sidebar, which are defined in this file. The modules in the file are specified as a vector of pairs, in the form module_id => module_title\n for example \"module1\" => \"Week 1: Introduction to the class\"\n To link a file to a module, you will need to add the module identifier in the page tags. For more info about this, see  Add frontmatter tracks.jl In this file you will specify tracks. Tracks can be used to group lectures across modules, e.g. if they have a commmon theme. When a track is selected on the sidebar, only the pages\nbelonging to that track will be highlighted. Similar to modules, tracks are stored in a vector of pairs in the form track_id => track_title\n for example \"julia\" => \"💻 Julia programming\"\n To link a file to a track, you will need to add the track id, prefixed with  track_ , to the tags of the page. For example, to add a lesson to the julia track defined above, you would add the tag  track_julia  to the tags of that lesson file. License Choosing an appropriate license is important to make your material properly reusable. For text, popular licenses are  Creative Commons , for example  CC BY-SA 4.0 For code, an  OSI open source license  is recommended. For example  MIT  or  Apache 2.0  license. To add the license, open the file  LICENSE.md  and replace the text <insert license for your material judge>\n with your license(s)."},{"url":"mod1_setup_website/getting_started/","title":"Getting started","tags":["module1","track_setup","teaching","repository structure"],"text":"Fork the template Go to the  template repository  and click  Use this template  on the top-right corner. This will fork the repository under your github profile. Folder structure Let us have a look at what this repository looks like. The most important folder, where you will be mainly working is  src . Here you will place all your lecture materials. So let us take a closer look at this. Opening the  src  folder, you will see the following _data  folder: here you will place metadata about your website (university name, class semester, define tracks, etc.), more on this in the next lesson. _include : This folder contains the layout templates that are used to generate the final pages on your website. Unless you want to tweak the layout, you will not need to modify this. assets : in this folder you can place all attachements, such as your university logo and other pictures. The folder also contains the CSS and scripts used to render the website. That was for the “infrastructure part” of the website, the rest is content! To add new pages to your website, simply them under the  src  folder. You can group them in subfolders, as done in this template, but that is not a strict requirement. When downloading this template, you will get the following material: installation.md : this page contains instructions on how to install Julia and Pluto. If you find it useful, you may keep it as is, or edit to match your wanted installation instructions. cheatsheets.md : contains a list of julia related resources. Again, you can keep it or remove it. logistics.md : empty markdown page, where you can describe the logistics of your class index.jlmd : this is used to render the homepage.  Do not remove or modify this! search.md : this is used to render the search tab on the sidebar, do not modify or remove this file. The remaining folders mod1_setup_website mod2_add_material mod3_publish_website homework are placeholder samples, used to showcase what a deployed website looks like. As a bonus, these placeholder files actually document how to use this template.  You can read it and see what the final result looks like on the  template webpage . When starting adding your course material, you will most likely want to remove these."},{"url":"mod1_setup_website/working_locally/","title":"Working locally","tags":["module1","track_setup","track_julia","PlutoSliderServer","pluto"],"text":"Working locally Open this repository in VS Code, and install the recommended extensions. To start running the development server, open the VS Code  command palette  (press  Cmd+Shift+P ), and search for  Tasks: Run Task , then  PlutoPages: run development server . The first run can take some time, as it builds up the notebook outputs cache. Leave it running. This will start two things in parallel: the PlutoPages.jl notebook (which generates the website), and a static file server (with Deno_jll). It will open two tabs in your browser: one is the generation dashboard (PlutoPages), the other is the current site preview (Deno_jll). Whenever you edit a file, PlutoPages will automatically regenerate! Refresh your browser tab. If it does not pick up the change, go to the generation dashboard and click the “Read input files again” button. Note! : This workflow is recommended for writing static content, styles, and for site maintenance. But for writing Pluto notebooks, it’s best to prepare the notebook first, and then run the site (because it re-runs the entire notebook on any change)."},{"url":"mod2_add_material/add_markdown/","title":"Add markdown files","tags":["module2","track_material","markdown","frontmatter"],"text":"Add markdown files If your lecture does not need to run code or use interactivity. You can write it as a markdown file. As an extra twist, you can evaluate julia code inside a  $  symbol. For example, $(1 + 1)\n will become 2 Add Front-matter For each file, markdown or pluto, you will need to add a  front-matter , which specifies the page metadata. For markdown files, the front-matter is specified at the top of the file between three dashes  --- . For example, the front-matter of this file is ---\ntitle: \"Add markdown file\"\norder: 1\nchapter: 2\nsection: 1\nlayout: \"md.jlmd\"\ntags: [\"module2\", \"track_material\", \"markdown\", \"frontmatter\"]\n---\n You will need to specify the following attributes title : title of the page order : the position of the page in the module on the sidebar.  Hint! : You can also use fractional numbers, e.g.  1.5 . This can be handy for homeworks, so you can include the homework between the first and second lesson without messing up lessons counting. layout : set to  \"md.jlmd\" , unless you are using some custom layout chapter  and  section  (optional): used to number the page. If for example  chapter=1  and  section=2 , the page will be displayed as  1.2  on the sidebar and page header. image  (optional): link to summarizing image to display in the  subjects  section on the homepage. If left empty, the page wont be included in the subjects section. If no page has an  image  field in the front-matter, the subjects section is not displayed. description  (optional): short description of the notebook youtube_id  (optional): youtube id of the video associated with the page. If included, the page header will embed the youtube video. homework_number : needed only for homeworks, the number of the homework tags : list of keywords for the page. It should at least include the module name, as defined in  _data/sidebar.jl  to include the page in the sidebar. You can also associate pages to a given track by adding the track id, prefixed with  track_  to the tags. For example, if you want to include the page in the julia track, add  track_julia  in the tags list. Markdown 101 If you are not familiar with markdown, you can see for example  here . Here is a quick and dirty cheatsheet Use  #  for headers, for example # Header\n## Subheader\n### Sub-sub-header\n You can create links with the syntax [text](adddress)\n For example the link to the mardown tutorial above was typed as [here](https://www.markdowntutorial.com/)\n You can insert pictures with the syntax ![optional alternative text](link-to-picture)\n for example ![](https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/master/images/julia-logo-color.png)\n will give"},{"url":"mod2_add_material/add_pluto/","title":"Add Pluto notebooks","tags":["module2","track_julia","track_material","Pluto","PlutoUI"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 2 section 2 order 2 image \"https raw.githubusercontent.com fonsp Pluto.jl 580ab811f13d565cc81ebfa70ed36c84b125f55d demo plutodemo.gif\" title \"Add Pluto notebooks\" tags \"module2\", \"track julia\", \"track material\", \"Pluto\", \"PlutoUI\" layout \"layout.jlhtml\" using Markdown using InteractiveUtils using PlutoTeachingTools, PlutoUI TableOfContents md\"\"\" Add Pluto notebooks Pluto.jl https plutojl.org is a revolutionary text editor for reactive and interactive programming. To start creating a Pluto notebook, open a terminal and launch Julia, then do ```julia using Pluto Pluto.run ``` This will launch a Pluto session, where you can write your notebook. To add the front matter, you can use Plut FrontmatterGUI, as the following short video clip shows. danger md\"For pluto notebooks, you will need to set layout to layout.jlhtml\" \"\"\" html\"\"\" video controls \"controls\" width \"800\" height \"600\" name \"Video Name\" source src \"https user images.githubusercontent.com 6933510 207080363 b912d591 f6f6 4522 a6fe 701e5ab04f0b.mov\" video \"\"\" md\"\"\" Pluto 101 Pluto is a notebook for Julia It is reactive , lightweight and has powerful interactivity tools . This will allow you to make your lesson material more engaging for students. Here are a few highlights of Pluto. tip md\" To learn more, check out Pluto featured notebooks https featured.plutojl.org , the JuliaCon video at the beginning of this notebook, or the presentations at PlutoCon 2021 https www.youtube.com playlist?list PLP8iPy9hna6T5sNOTeGdiqygHe 09geEW .\" Writing code in Pluto In Pluto code is written in cells, to add some code, simply create a new cell and type in. Each cell should contain 1 julia expression function definition, if statement, variable assignment, etc. . ```julia if rand 0.5 \"hi\" else \"there\" end ``` or ```julia a 1 ``` or ```julia function f return rand ^ 2 end ``` However , multiple expressions in the same cell are not allowed, for example ```julia a 1 b 2 a b ``` cannot be written in the same cell. You have two alternatives 1. Split it into multiple cells recommended to make reactivity better . 2. Wrap your staments inside a `begin ... end` or `let ... end` block. The difference is that the latter introduces a local scope, hence variables defined inside `let` are not visibles from outside. Reactivity Pluto is reactive This means that if you define a variable `a` in a cell, when you edit the variable value, all cells depending on that variable are automatically re evaluated. A few notes 1. As mentioned above, better to have a single variable assignment per cell, this will make the dependency graph slimmer and reactivity smoother. 2. Code modifying a given variable should be in the same cell, i.e. you cannot have two cells modifying the same variable. Here is a summarizing demo \"\"\" Resource \"https raw.githubusercontent.com fonsp Pluto.jl 580ab811f13d565cc81ebfa70ed36c84b125f55d demo plutodemo.gif\", width 350 md\"\"\" Built in environment Pluto is designed with reproducibility in mind To use packages registered in the Julia general registry, just type `using MyPackage` in some cells, as done at the beginning of this notebook. Pluto will automatically download the package The `Project.toml` and `Manifest.toml` what Julia uses to record all libraries, their versions and dependencies are stored inside the notebook, making it fully batteries included Resource \"https user images.githubusercontent.com 6933510 134823403 fbb79d7f dd3e 4712 b5d5 b48ad0770f13.gif\", width 400 \"\"\" md\"\"\" Interactivity Pluto has great support to make your notebooks interactive It allows you to associate variables with sliders and buttons that you can use to interactively change the result of the code. https user images.githubusercontent.com 6933510 136196607 16207911 53be 4abb b90e d46c946e6aaf.gif The easiest way to harness the power of Pluto interactivity is to use PlutoUI.jl https github.com juliapluto PlutoUI.jl , which is showcased in the next lecture https juliapluto.github.io mod2 add material plutoui showcase . \"\"\" "},{"url":"mod2_add_material/our_first_climate_model/","title":"Our first climate model","tags":["lecture","module3","climate","modeling","track_climate","track_math","plotting","data","ODE","differential equation","CSV","dataframe","track_data"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 3 video \"https www.youtube.com watch?v J1UsMa1cTeE\" image \"https user images.githubusercontent.com 6933510 136199705 7bdb6bb0 8698 43a1 87e6 c073ab102da5.png\" section 4 order 4 title \"Our first climate model\" layout \"layout.jlhtml\" youtube id \"J1UsMa1cTeE\" description \"\" tags \"lecture\", \"module3\", \"climate\", \"modeling\", \"track climate\", \"track math\", \"plotting\", \"data\", \"ODE\", \"differential equation\", \"CSV\", \"dataframe\", \"track data\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using DifferentialEquations using Plots, PlutoUI using LinearAlgebra using CSV, DataFrames end TableOfContents title \"📚 Table of Contents\", indent true, depth 4, aside true md\"\"\" This lecture is based on the fall 2020 \"Introduction to Climate Modeling\" lecture by Henri Drake. Henri's video https computationalthinking.mit.edu Fall20 lecture20 , Henri's original notebook https github.com mitmath 18S191 blob Fall20 lecture notebooks week11 01 energy balance model.jl where he describes the Energy Balance Model. \"\"\" md\"\"\" Pre Computational Thinking traditional ode \"analytic\" solutions \"\"\" md\"\"\" Notation ``y y t `` is a function of time t Inititally t 0 , y 0 y 0 We write ``y'`` for ``dy dt``. \"\"\" md\"\"\" ``y' `` constant ``y' a`` html\" br \" Solution ``y t at y 0`` \"\"\" md\"\"\" ``y' `` linear in y ``y' a by`` html\" br \" Solution ``y t \\frac a b e^ bt 1 y 0 e^ bt `` Comment Equilibrium obtained if b\\ne0 by solving y' 0 for y giving equilibrium y a b . Also can be obtained by letting t\\rightarrow \\infty in the solution killing the exponential terms. \"\"\" md\"\"\" ``y' `` linear in y \"forcing term\" in t ``y' a by f t `` html\" br \" Solution ``y t e^ bt \\left y 0 \\int 0^t e^ bu a f u du \\right `` \"\"\" md\"\"\" Computational Thinking \"\"\" md\"\"\" Review Solving an ODE y' f y in Julia 0. Define f y,p,t 1. ODEProblem f, f 0 , time span, parameters 2. solve 3. plot etc \"\"\" f y, a, b, forcing c ,t a b y forcing c t forcing c t c t md\"\"\" a bind a Slider 0 .01 10, show value true, default 0 b bind b Slider 0 .1 5, show value true, default 0 y₀ bind y₀ Slider 5 .1 15, show value true, default 2.0 c bind c Slider 0 .1 5, show value true, default 0.0 \"\"\" sol solve ODEProblem f, y₀, 0, 10.0 , a, b, forcing c y₀ begin p plot sol , legend false, background color inside black , ylims 0, 10 , lw 3, c red plot direction field xs Float64 ys Float64 lrx LinRange xlims p ..., 30 for x in lrx for y in LinRange ylims p ..., 30 v 1, a b y forcing c x v . 20 lrx 2 lrx 1 plot x, x v 1 , y, y v 2 , alpha 0.5, c gray push xs, x v 1 , x v 1 , NaN push ys, y v 2 , y v 2 , NaN end end hline b 0 ? 0 a b ,c white,ls dash plot xs, ys, alpha 0.7, c yellow ylabel \"y\" annotate .5,y₀,text \"y₀\",color red title \"Solution to y' t a by forcing c t \" end md\"\"\" Background climate physics The simplest climate model can be conceptualized as ```math \\begin align \\text \\color brown change in heat content & \\text \\color orange absorbed solar radiation energy from the Sun's rays \\newline & \\text \\color blue outgoing thermal radiation i.e. blackbody cooling to space \\newline & \\text \\color grey human caused greenhouse effect trapped outgoing radiation \\end align ``` where each of these is interpreted as an average over the entire globe hence \"zero dimensional\" . \"\"\" html\"\"\" img src \"https raw.githubusercontent.com hdrake hdrake.github.io master figures planetary energy balance.png\" height 225 \"\"\" md\"\"\" 1.1 Incoming 🌞 Absorbed solar radiation an example of \\mathrm temp ' constant \"\"\" md\"\"\" Heating the earth nonstop \"\"\" md\"\"\" At Earth's orbital distance from the Sun, the power of the Sun's rays that intercept the Earth is equal to \"\"\" S 1368 solar insolation W m^2 energy per unit time per unit area md\"A small fraction\" α 0.3 albedo, or planetary reflectivity unitless md\"\"\" In math we just write down a differential equation, but in the physical world there are physical variables to identify. In our baking the earth example, we will identify the following quantities Industrial Revolution Start 1850 Avg Temperature in 1850 14.0 °C Solar Insolation S 1368 W m^2 energy from the sun Albedo or plentary reflectivity α 0.3 atmosphere and upper ocean heat capacity C 51 J m^2 °C Earth Baking Formula html\" br \" `` C\\ \\mathrm temp ' t S 1 α 4 `` round S 1 α 4 sigdigits 4 \"\"\" md\"\"\" of this incoming solar radiation is reflected back out to space by reflective surfaces like white clouds, snow, and ice , with the remaining fraction 1 \\alpha being absorbed. Since the incoming solar rays are all approximately parallel this far from the Sun, the cross sectional area of the Earth that intercepts them is just a disc of area \\pi R^ 2 . Since all of the other terms we will consider act on the entire surface area 4\\pi R^ 2 of the spherical Earth, the absorbed solar radiation per unit surface area averaged over the entire globe is reduced by a factor of 4. https www.open.edu openlearn ocw pluginfile.php 101161 mod oucontent oucontent 890 639dcd57 ce3f1c3a s250 3 002i.jpg The absorbed solar radiation per unit area is thus \\textcolor orange \\text absorbed solar radiation \\equiv \\frac S 1 \\alpha 4 \"\"\" absorbed solar radiation S 1 α 4 W m^2 begin C 51. atmosphere and upper ocean heat capacity Wyr m^2 °C temp₀ 14.0 preindustrial temperature °C end p1 ODEProblem temp, p, t 1 C absorbed solar radiation, temp₀, 0.0, 170 begin plot solve p1 , legend false, background color inside black, xlabel \"years from 1850 \", ylabel \"Temperature °C\" hline temp₀,temp₀ ,c white,ls dash annotate 80, 25 temp₀, text \"Preindustrial Temperature temp₀ °C\",color white title \"Absorbing Solar Radiation only \" end md\"\"\"The heat content C temp is determined by the temperature temp in Kelvin and the heat capacity of the climate system. While we are interested in the temperature of the atmosphere, which has a very small heat capacity, its heat is closely coupled with that of the upper ocean, which has a much larger heat capacity of \"\"\" md\"\"\" The change in heat content over time is thus simply given by \\frac d CT dt . Since the heat capacity of sea water hardly changes with temperature, we can rewrite this in terms of the change in temperature with time as \\color brown \\text change in heat content \\ C \\frac dtemp dt \"\"\" md\"\"\" 1.2 Outgoing ♨ thermal radiation \"\"\" md\"\"\" The outgoing thermal radiation term \\mathcal G T or \"blackbody cooling to space\" represents the combined effects of negative feedbacks that dampen warming , such as blackbody radiation , and positive feedbacks that amplify warming , such as the water vapor feedback . Since these physics are too complicated to deal with here, we linearize the model combining the incoming and the outgoing. We assume that the preindustrial world was in energy balance, and thus the equilibrium temperature is the preindustrial temperature. Thus we assume temp' t B temp 0 temp t for some value of B . The minus sign in front of temp t indicating it restores equilibrium. \"\"\" md\"\"\" The value that has been chosen is \"\"\" B 1.3 climate feedback parameter W m^2 °C , md\"\"\" start\\ temp bind start temp Slider 0 28 show value true, default 14 \"\"\" p2 ODEProblem temp, p, t 1 C B temp₀ temp , start temp, 0.0, 170 begin plot solve p2 , legend false, background color inside black, xlabel \"years from start\", ylabel \"Temperature °C\", ylim 0, 30 hline temp₀,temp₀ ,c white,ls dash annotate 80, temp₀, text \"Preindustrial Temperature temp₀ °C\", bottom,color white title \"Energy Balance Model Healthy Earth \" end md\"\"\" 1.3 Greenhouse 🏭 Human caused greenhouse effect Empirically, the greenhouse effect is known to be a logarithmic function of gaseous carbon dioxide CO₂ concentrations \\color grey \\text human caused greenhouse effect \\ \\mbox forcing\\ coef \\ln \\left \\frac \\text CO ₂ \\text CO ₂ \\text PreIndust \\right , How this depends on time into the future depends on human behavior Time is not modelled in the above equation. \"\"\" md\"where\" forcing coef 5.0 CO2 forcing coefficient W m^2 CO₂ PreIndust 280. preindustrial CO2 concentration parts per million ppm greenhouse effect CO₂ forcing coef log CO₂ CO₂ PreIndust begin CO2 present 420. CO2 range 280 2 .^ range 1, stop 3,length 100 plot CO2 range, greenhouse effect. CO2 range , lw 2.5, label nothing, color black plot CO₂ PreIndust , greenhouse effect CO₂ PreIndust , marker circle, ms 6, linecolor white, color blue, lw 0, label \"pre industrial PI \" plot CO2 present , greenhouse effect CO2 present , marker circle, ms 6, color red, linecolor white, lw 0, label \"present day 2020 \" plot xticks 280, 280 2, 280 4, 280 8 , legend bottomright, size 400, 250 plot ylabel \"Radiative forcing W m² \", xlabel \"CO₂ concentration ppm \" end begin CO₂ t CO₂ PreIndust no emissions CO₂ t CO₂ PreIndust 1.01^t test model CO₂ t CO₂ PreIndust 1 t 220 ^3 end greenhouse effect CO₂ 15 p3 ODEProblem temp, p, t 1 C B temp₀ temp greenhouse effect CO₂ t , start temp, 0.0, 170 begin plot solve p3 , legend false, background color inside black, xlabel \"years from 1850\", ylabel \"Temperature °C\", ylim 10, 20 hline temp₀,temp₀ ,c white,ls dash annotate 80, temp₀, text \"Preindustrial Temperature temp₀ °C\", bottom,color white title \"Model with CO₂\" end begin years 1850 2030 plot years, CO₂. years. 1850 , lw 3, legend false xlabel \"year\" ylabel \"CO₂ ppm \" end md\"\"\" Observations from Mauna Loa Volcano Mauna Loa Volcano https i.pinimg.com originals df 1a e7 df1ae72cfd5e6d0d535c0ec99e708f6f.jpg information is available at https www.ncei.noaa.gov pub data paleo icecore antarctica law law2006.txt https www.ncei.noaa.gov pub data paleo icecore antarctica law law2006.txt . \"\"\" CO2 historical data url \"https gml.noaa.gov webdata ccgg trends co2 co2 mm mlo.csv\" CO2 historical path download CO2 historical data url begin offset findfirst startswith \" \" , readlines CO2 historical path CO2 historical data raw CSV.read CO2 historical path, DataFrame header offset, skipto offset 1, first CO2 historical data raw, 11 end md\"\"\" Data is in the column `\"average\"`. \"\"\" md\"\"\" Oh no, missing data 99.99 \"\"\" validrowsmask CO2 historical data raw , \"average\" . 0 CO2 historical data CO2 historical data raw validrowsmask, begin plot CO2 historical data , \"decimal date\" , CO2 historical data , \"average\" , label \"Mauna Loa CO₂ data Keeling curve \" plot years, CO₂. years. 1850 , lw 3 , label \"Cubic Fit\", legend topleft title \"CO₂ observations and fit\" end md\"\"\" We will use this fit to compare against historical temperatures. \"\"\" md\"\"\" Climate feedback BB bind BB Slider 0 .1 4, show value true, default B Ocean Heat Capacity CC bind CC Slider 10 .1 200, show value true, default C \"\"\" p4 ODEProblem temp, p, t 1 CC BB temp₀ temp greenhouse effect CO₂ t , start temp, 0.0, 170 md\"\"\" Best and worst case projections of future global warming \"\"\" md\"\"\"Consider two divergent hypothetical futures 1. a low emissions world in which emissions decrease such that CO2 concentrations stay below 500 ppm by 2100 known in climate circles as \"RCP2.6\" and 2. a high emissions world in which emissions continue increasing and CO2 concentrations soar upwards of 1200 ppm \"RCP8.5\" . \"\"\" md\"\"\" https raw.githubusercontent.com mitmath 18S191 Spring21 notebooks week12 predictthefuture.svg \"\"\" md\"\"\" In the low emissions scenario, the temperature increase stays below ΔT 2 °C by 2100, while in the high emissions scenario temperatures soar upwards of 3.5ºC above pre industrial levels. \"\"\" md\"Although the greenhouse effect due to human caused CO₂ emissions is the dominant forcing behind historical and future projected warming, modern climate modelling considers a fairly exhaustive list of other forcing factors aerosols, other greenhouse gases, ozone, land use changes, etc. . The video below shows a breakdown of these forcing factors in a state of the art climate model simulation of the historical period.\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid E7kMr2OYKSU params \"modestbranding 1&rel 0\" lite youtube \"\"\" solp4 solve p4 begin T url \"https data.giss.nasa.gov gistemp graphs graph data Global Mean Estimates based on Land and Ocean Data graph.txt\" T df CSV.read download T url ,DataFrame, header false, skipto 6,delim \" \" T df T df , 1,6 end begin plot years,solp4. years. 1850 ,lw 2,label \"Predicted Temperature from model\", legend topleft xlabel \"year\" ylabel \"Temp °C\" plot parse. Float64, T df ,1 , parse. Float64, T df ,2 . 14.15, color black, label \"NASA Observations\", legend topleft end "},{"url":"mod2_add_material/plutoui_showcase/","title":"PlutoUI showcase","tags":["module2","track_julia","track_material","Pluto","PlutoUI","interactivity"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter \"2\" image \"https user images.githubusercontent.com 6933510 174067690 50c8128d 748b 4f50 8a76 2ce18166642b.png\" order \"3\" section \"3\" title \"PlutoUI showcase\" tags \"module2\", \"track julia\", \"track material\", \"Pluto\", \"PlutoUI\", \"interactivity\" layout \"layout.jlhtml\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end using PlutoUI md\"\"\" PlutoUI.jl Pluto notebooks can use ` bind` to add interactivity to your notebook. It's a simple concept it uses the same reactivity that you have when editing code, except now you use sliders and buttons, instead of editing code. This notebook showcases some features of `PlutoUI.jl` , which allows you to easily add interactivity to your notebooks. This notebook is from Pluto featured notebooks https featured.plutojl.org , make sure to also check the others to learn more cool Pluto tricks \"\"\" md\"\"\" To use it in other notebooks Simply import the `PlutoUI` package, and Pluto's built in package manager takes care of the rest \"\"\" TableOfContents This is all you need to get a nice table of content md\"\"\" Basics \"\"\" md\" Slider\" bind x Slider 5 15 x md\"The first argument is a `Vector` or range. You can set the default value using a keyword argument \" bind y Slider 20 0.1 30, default 25 y md\"\"\" Scrubbable `Scrubbable` makes a number interactive, you can click and drag its value left or right. Try it in the text below \"\"\" md\"\"\" If Alice has bind a Scrubbable 20 apples, and she gives bind b Scrubbable 3 apples to Bob... \"\"\" md\"\"\" ...then Alice has a b apples left. \"\"\" md\"\"\" Use the Live Docs to learn more about `Scrubbable` \"\"\" md\" NumberField A `NumberField` can be used just like a `Slider`, it just looks different \" bind x different NumberField 0 100, default 20 md\" CheckBox\" bind z CheckBox z md\"Default value \" bind having fun CheckBox default true having fun having fun ? md\"🎈🎈\" md\"☕\" md\" TextField\" bind s TextField s md\"With a default value \" bind sentence TextField default \"te dansen omdat men leeft\" sentence md\"You can also create a multi line text box \" bind poem TextField 30, 3 , \"Je opent en sluit je armen,\\nMaar houdt niets vast.\\nHet is net zwemmen\" poem by Sanne de Kroon split poem, \"\\n\" md\" Select\" bind vegetable Select \"potato\", \"carrot\" vegetable bind favourite function Select sin, cos, tan, sqrt favourite function 2 md\"Instead of an array of values, you can also give an array of pairs , where the first item is the bound value, and the second item is displayed. \" bind fruit Select \"apple\" \"🍎\", \"melon\" \"🍉\" fruit md\"\"\" MultiSelect This widget allows the user to select multiple element by holding `Ctrl` `Cmd` while clicking a more items. \"\"\" bind vegetable basket MultiSelect \"potato\", \"carrot\", \"boerenkool\" vegetable basket md\"Just like `Select`, you can also give an array of pairs.\" md\"\"\" MultiCheckBox This widget allows the user to select multiple elements using checkboxes. \"\"\" bind fruit basket MultiCheckBox \"apple\", \"blueberry\", \"mango\" fruit basket md\"\"\" You can use `MultiSelect` and `MultiCheckBox` with any vector of objects, not just strings \"\"\" bind my functions MultiCheckBox sin, cos, tan f π for f in my functions md\"Just like `Select`, you can also give an array of pairs. See the Live Docs for `MultiCheckBox` for all the customization options \" md\" Button\" bind clicked Button \"Hello world\" clicked md\"\"\" Button as reactive trigger In the example above, any cell that references `clicked` will re evaluate when you click the button. This means that you can a button as a reactive trigger , by referencing its value in another cell. \"\"\" bind go Button \"Recompute\" let go md\"I am rand 1 15 years old \" end md\" FilePicker\" bind important document FilePicker important document md\"The file picker is useful if you want to show off your notebook on a dataset or image uploaded by the reader . It will work anywhere you don't access files using their path. The caveat is that large files might take a long time to get processed everything needs to pass through the browser. If you are using large datasets, a better option is to use `Select` to let the reader pick a filename. You can then read the file using `Base.read filename, type `\" md\" Extras\" md\" Clock\" bind t Clock t md\"You can set the interval `5.0` seconds , and disable the UI `true` \" bind t slow Clock 5.0, true t slow md\"You can use a `Clock` to drive an animation Or use it to repeat the same command at an interval just like with `Button`, you can reference a bound reactive variable without actually using it \" md\" DownloadButton\" md\"\"\" The download button is not an input element that you can ` bind` to, it's an output that you can use to get processed data from your notebook easily. The second argument is the output filename . \"\"\" DownloadButton poem, \"poem.txt\" DownloadButton 0x01, 0x02, 0x03 , \"secret data.bin\" md\"\"\" High level inputs \"\"\" md\"\"\" Confirm Normally, when you move a `Slider` ref or type in a `TextField` ref , all intermediate values are sent back to ` bind`. By wrapping an input element in `confirm`, you get a button to manually control when the value is sent , intermediate updates are hidden from Pluto. \"\"\" bind distance confirm Slider 1 100 distance md\"\"\" `confirm` can be wrapper around any input element to create a new one, including inputs from other packages, or inputs that you have made yourself \"\"\" md\"\"\" Combine This next high level component is a bit tricky, but very powerful Using `combine`, you can create a single input out of multiple existing ones In the example below, we create a new input, `wind speed input` . Notice that the list of wind directions is dynamic if you add a new direction, a 5th slider will appear \"\"\" import PlutoUI combine function wind speed input directions Vector return combine do Child inputs md\"\"\" name Child name, Slider 1 100 \"\"\" for name in directions md\"\"\" Wind speeds inputs \"\"\" end end bind speeds wind speed input \"North\", \"East\", \"South\", \"West\" speeds speeds.North md\"\"\" Use the Live Docs to learn more about `combine` and to see additional examples. 🙋 `combine` is very useful in combination with HypertextLiteral.jl https github.com MechanicalRabbit HypertextLiteral.jl , which you can learn using our JavaScript sample notebook. \"\"\" md\"\"\" Loading resources Notebooks use data from different places. For example, you use `Base.read` https docs.julialang.org en v1 base io network ~ text read filename%3A%3AAbstractString%2C%20String to access local data files inside your Julia code, and `Downloads.jl` https github.com JuliaLang Downloads.jl for remote data interwebs . `PlutoUI` helps you communicate with the person reading the notebook To get remote media URL inside your Markdown text , use `PlutoUI.Resource`. To get local media file inside your Markdown text , use `PlutoUI.LocalResource`. With media , we mean images , video and audio. We strongly recommend that you use remote media inside Pluto notebooks If your notebook uses local images, then those images will not show when someone else opens your notebook, unless they have the same images on their computer, at the exact same location. More on this later. \"\"\" md\"\"\" Resource If you just want to show images inside Markdown , you can use the built in syntax without `PlutoUI` ``` md\"Here is a dog https fonsp.com img doggoSmall.jpg \" ``` `PlutoUI.Resource` has some extra features specify image dimensions and spacing support for videos support for audio\"\"\" dog url \"https upload.wikimedia.org wikipedia commons thumb 1 15 Welsh Springer Spaniel.jpg 640px Welsh Springer Spaniel.jpg\" Resource dog url, width x x different t rex url \"https upload.wikimedia.org wikipedia commons transcoded 6 62 Meow.ogg Meow.ogg.mp3\" flower url \"https upload.wikimedia.org wikipedia commons 4 41 Sunflower Flower Opening Time Lapse.ogv\" md\"\"\"Hello I am a dog Resource dog url \"\"\" md\"\"\"And I sound like this Resource t rex url \"\"\" md\"\"\"This is my flower friend Resource flower url, width 200 \"\"\" md\" Attributes You can pass additional HTML attributes to `Resource`, these will be added to the element. For example \" md\"\"\" Resource dog url, width 20 Resource dog url, width 50 Resource dog url, width 100 Resource dog url, width 100, style \"filter grayscale 100% border 3px solid black \" \"\"\" Resource flower url, width 200, autoplay \"\", loop \"\" md\" YouTube, Vimeo, etc. If you use `Resource` for video, the URL has to point to a video file like `.mp4` or `.mov` . Popular video sites don't give you that link, instead, you can use their embed codes . You can find these inside the video player, by right clicking or using the menu buttons. You then use that inside an HTML block ``` html\\\"\\\"\\\" ~ paste embed code here ~ \\\"\\\"\\\" ``` You might need to change the `width` to `100%` to make it fit.\" html\"\"\" div style \"padding 56.25% 0 0 0 position relative \" iframe src \"https player.vimeo.com video 438210156\" style \"position absolute top 0 left 0 width 100% height 100% \" frameborder \"0\" allow \"autoplay fullscreen\" allowfullscreen iframe div script src \"https player.vimeo.com api player.js\" script \"\"\" md\" LocalResource not recommended The examples above use `Resource` to make media from a URL available inside Markdown. To use local files , simply replace `Resource` with `LocalResource` , and use a file path instead of a URL.\" html\" span style 'font family cursive color purple ' I really hope that this works span \" md\"\"\"Hello I am a dog LocalResource \"C \\\\Users\\\\fons\\\\Pictures\\\\hannes.jpg\" \"\"\" md\"\"\" html\" span style 'font family cursive color purple ' OOPS span \" , it didn't html\" br \" Here are two tips for getting local images to work correctly 1. Go to imgur.com https imgur.com and drag&drop the image to the page. Right click on the image, and select \"Copy image location\". You can now use the image like so ```PlutoUI.Resource \"https i.imgur.com SAzsMMA.jpg\" ``` 2. If your notebook is part of a git repository, place the image in the repository and use a relative path ```PlutoUI.LocalResource \".. images cat.jpg\" ``` \"\"\" md\" Why does it have to be so difficult? Pluto only stores code in the notebook file, not images. This minimal file format is very valuable, but it means that images need to be addressed , not stored. Addressing local files is fragile if someone else opens the notebook, or if you move the notebook to a different folder, that image file needs to be available at exactly the same path. This is difficult to do correctly, and if it works for you, it is hard to tell if it will work for someone else. Putting images online might be a hassle, but once it works, it will work everywhere The stateless nature of URLs means that the images will work regardless of how the notebook file is accessed, while keeping a minimal file format.\" md\" PlutoUI without Pluto Huh? Did you know that you can run Pluto notebooks without Pluto ? If your notebook is called `wow.jl`, then ```sh julia wow.jl ``` will run the notebook just fine. When you use ` bind`, your notebook can still run without Pluto Sort of. Normally, all bound variables are assigned the value `missing` when you run it elsewhere. However, the `PlutoUI` types have all been configured to assign a more sensible default value. For example, if your notebook contains ```julia bind x Slider 10 20 ``` and you run it without Pluto, then this statement simply assigns `x 10`. \" md\"`Pluto` and `PlutoUI` work independently of each other In fact, you could write a package with fun input elements, or add ` bind`able values to existing packages.\" md\" Appendix\" space html\" br br br \" space space space space space "},{"url":"mod4_Radiation/ch02_bowen_ratio/","title":"Bowen Ratio","tags":["lecture","ch02","Bowen"],"text":" A Pluto.jl notebook v0.19.32 frontmatter image \"https user images.githubusercontent.com 6933510 136199718 ff811eb3 aad6 4d6b 99e0 f6bf922816b4.png\" order 4 chapter 4 section 1 title \"Bowen Ratio\" layout \"layout.jlhtml\" description \"\" tags \"lecture\", \"ch02\", \"Bowen\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using Pkg Pkg.activate \".\" using HydroTools using HydroTools Cp, ϵ using Plots using Ipaper using PlutoUI gr framestyle box nothing function cal gamma Tair, Pa atm lambda cal lambda Tair Cp Pa ϵ lambda u\"kPa K\" end function cal bowen Tair, Pa atm Δ cal slope Tair γ cal gamma Tair, Pa γ Δ end Pkg.add \"PlutoUI\" end html\"\"\" style main max width 1100px align self flex start margin left 50px \"\"\" md\"\"\" Ta bind Ta Slider 40 1.0 50 default 25, show value true ℃ \"\"\" cal lambda Ta MJ kg begin T 40 0.1 40 es cal es. Ta nothing end begin function draw plot fun cal slope, title \"Δ of es\", unit \"kPa ℃\" p2 plot T, fun. T title, xlabel \"Tair ℃ \", ylabel unit, label nothing scatter Ta , fun Ta , label nothing vline Ta , linestyle dash, color grey, label nothing hline fun Ta , linestyle dash, color grey, label nothing label2 sprintf \" %.2f ℃, %.3f %s \", Ta, fun Ta , unit annotate Ta, fun Ta , text label2, red, right, bottom, 12 p2 end end begin p es draw plot fun cal es, title \"es\", unit \"kPa\" p slope draw plot fun cal slope, title \"Δ\", unit \"kPa ℃\" p gamma draw plot fun cal gamma, title \"γ\", unit \"kPa ℃\" p bowen draw plot fun cal bowen, title \"bowen γ Δ\", unit \"\" plot p es, p slope, p gamma, p bowen, size 800,700 end "},{"url":"mod4_Radiation/ch04_radiation/","title":"Radiation","tags":["lecture","ch02","Radiation"],"text":" A Pluto.jl notebook v0.19.32 frontmatter image \"https user images.githubusercontent.com 6933510 136199718 ff811eb3 aad6 4d6b 99e0 f6bf922816b4.png\" order 4 chapter 4 section 2 title \"Radiation\" layout \"layout.jlhtml\" description \"\" tags \"lecture\", \"ch02\", \"Radiation\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end time begin using Pkg Pkg.activate \".. .. pluto deployment environment\" Pkg.add \"PlutoUI\" using PlutoUI using Plots using Dates global functions deg2rad x x 180 pi rad2deg x x pi 180 function get md J date origin DateTime 2010, 1, 1, 0, 0, 0 Day J 1 Dates.format date origin, \"mm dd\" end function ssh2time ssh w hour ssh 2 w sec floor Int, w hour 3600 time begin DateTime 2000, 1, 1, 12, 0, 0 Dates.Second w sec time end DateTime 2000, 1, 1, 12, 0, 0 Dates.Second w sec time begin, time end time begin, time end Dates.format time begin, \"HH MM SS\" , Dates.format time end, \"HH MM SS\" time begin, time end end Solar Declination Angle （黄赤交角） function get σ J to deg false σ 0.409 . sin. 2 pi 365 J . 1.39 in rad if to deg σ rad2deg. σ end σ end end md\"\"\" 黄赤交角 σ 纬度 ϕ 时角 ω \"\"\" t 12 12 夜间0 12 ，第二天夜间为24 12 t collect 0 24 t2 t . 12 t2 . 15 ω deg2rad t2 . 15 length ω deg2rad t2 . 15 sinh sin ϕ sin σ . cos ϕ cos σ cos. ω plot sinh hline 0 , color \"black\" md\"\"\" doy bind J Slider 1 365 default 319, show value true lat bind lat Slider 90 0.1 90, default 30.5, show value true \"\"\" begin d r reverse relative Earth Sun distance I₀ ρ₀² function relativeDist J 1 . 0.033 . cos. 2 pi 365 J end plot relativeDist 1 365 , title \"doy J\", label \"\", framestyle box, ylab \"I₀ ρ₀²\", xlab \"Doy of Year DOY \" scatter J , relativeDist J , markersize 6, label \"\" end plot collect 1 J plot x begin plot get σ 1 365 to deg true , title \"doy J\", label \"\", framestyle box, ylab \"Solar Declination Angle\" scatter J , get σ J to deg true , markersize 6, label \"\" p angle SolarDecimation 1 10 end begin 太阳高度角sinh ω collect 2 pi 0.02 2 pi ϕ deg lat ϕ deg2rad ϕ deg ϕ 获取日出时间和日落时间，即sinh 0 function get ssh ϕ, J σ get σ. J rad2deg σ tmp tan. ϕ . tan. σ clamp tmp, 1, 1 constrain in the range of 1, 1 w acos. tmp w hour w pi 12 距离中午的时间 ssh w hour 2 end doy 1 365 time sunrise ssh2time get ssh ϕ, J 1 title \"Sunshine Duration lat ϕ deg, doy J, Year Month get md J , sunrise and sunset time sunrise\" plot doy, get ssh ϕ, doy , title title, label \"\" scatter J , get ssh ϕ, J , label \"\" get ssh ϕ, J end get σ J | rad2deg "},{"url":"mod4_Radiation/images/","title":"Images as Data and Arrays","tags":["lecture","ch02","philip","track_julia","matrix","image"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 2 video \"https www.youtube.com watch?v 3zTO3LEY cM\" image \"https user images.githubusercontent.com 6933510 136196634 2294d0a7 e79a 40d0 bbb8 81da70f4d398.png\" section 3 order 1 title \"Images as Data and Arrays\" layout \"layout.jlhtml\" youtube id \"3zTO3LEY cM\" description \"\" tags \"lecture\", \"ch02\", \"philip\", \"track julia\", \"matrix\", \"image\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using PlutoUI using PlutoTeachingTools using HypertextLiteral end PlutoUI.TableOfContents aside true md\"\"\" Initializing packages When running this notebook for the first time, this could take up to 15 minutes. Hang in there \"\"\" md\"\"\" Images as examples of data all around us Welcome to the Computational Thinking using Julia for Real World Problems, at MIT in Spring 2021 The aim of this course is to bring together concepts from computer science and applied math with coding in the modern Julia language , and to see how to apply these techniques to study interesting applications and of course to have fun . We would be pleased if students who have been interested in computer science now become interested in computational science and those interested in scientific applications learn computer science they may not see elsewhere. ... and for all students, we wish to share the value of the Julia language as the best of both worlds. \"\"\" md\"\"\" Alan's Essay Are all programming languages the same? Superficially, many programming languages are very similar. \"Showoffs\" will compare functional programming vs imperative programming. Others will compare compiled languages vs dynamic languages. I will avoid such fancy terms in this little essay, preferring to provide this course's pedagogical viewpoint. Generally speaking beginning programmers should learn to create \"arrays\" write \"for loops\", \"conditionals\", \"comparisons\", express mathematical formulas, etc. So why Julia at a time when Python seems to be the language of teaching, and Java and C so prominent in the corporate world? As you might imagine, we believe Julia is special. Oh you will still have the nitty gritty of when to use a bracket and a comma. You might have strong opinions as to whether arrays should begin with 0 or 1 joke some say it's time to compromise and use ½. Getting past these irrelevant issues, you will begin to experience one by one what makes Julia so very special. For starters, a language that runs fast is more fun. We can have you try things that would just be so slow in other languages it would be boring. We also think you will start to notice how natural Julia is, how it feels like the mathematics, and how flexible it can be. Getting to see the true value of fancy terms like multiple dispatch, strong typing, generic programming, and composable software will take a little longer, but stick with us, and you too will see why Julia is so very special. \"\"\" md\"\"\" Computer Science and Computational Science Working Together \"\"\" md\"\"\" Applications of computer science in the real world use data , i.e. information that we can measure in some way. Data take many different forms, for example Numbers that change over time time series Stock price each second minute day Weekly number of infections Earth's global average temperature Video The view from a window of a self driving car A hurricane monitoring station Ultrasound e.g. prenatal Images Diseased versus healthy tissue in a medical scan Pictures of your favourite dog \"\"\" md\"\"\" Exercise Think of another two examples in each category. Can you think of other categories of data? \"\"\" md\"\"\" Computational science can be summed up by a simplified workflow \"\"\" md\"\"\" data ⟶ input ⟶ process ⟶ model ⟶ visualize ⟶ output \"\"\" md\"\"\" html\" br \" To use any data source, we need to input the data of interest, for example by downloading it, reading in the resulting file, and converting it into a form that we can use in the computer. Then we need to process it in some way to extract information of interest. We usually want to visualize the results, and we may want to output them, for example by saving to disc or putting them on a website. We often want to make a mathematical or computational model that can help us to understand and predict the behavior of the system of interest. In this course we aim to show how programming, computer science and applied math combine to help us with these goals. \"\"\" md\"\"\" Data Images as an example of data Let's start off by looking at images and how we can process them. Our goal is to process the data contained in an image in some way, which we will do by developing and coding certain algorithms . Here is the the Fall 2020 version of this lecture small variations by 3 Blue 1 Brown Grant Sanderson for your reference. \"\"\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid DGojI9xcCfg params \"modestbranding 1&rel 0\" lite youtube \"\"\" md\"\"\" If we open an image on our computer or the web and zoom in enough, we will see that it consists of many tiny squares, or pixels \"picture elements\" . Each pixel is a block of one single colour, and the pixels are arranged in a two dimensional square grid. You probably already know that these pixels are stored in a computer numerically perhaps in some form of RGB red,green,blue format. This is the computer's representation of the data. Note that an image is already an approximation of the real world it is a two dimensional, discrete representation of a three dimensional reality. \"\"\" md\"\"\" Input and Visualize loading and viewing an Image in Julia \"\"\" md\"\"\" Let's use Julia to load actual images and play around with them. We can download images from the internet, your own file, or your own webcam. \"\"\" md\"\"\" Downloading an image from the internet or a local file We can use the `Images.jl` package to load an image file in three steps. \"\"\" md\"\"\" Step 1 from internet we specify the URL web address to download from html\" br \" note that Pluto places results before commands because some people believe output is more interesting than code. This takes some getting used to. \"\"\" url \"https user images.githubusercontent.com 6933510 107239146 dcc3fd00 6a28 11eb 8c7b 41aaf6618935.png\" md\"\"\" Step 2 Now we use the aptly named `download` function to download the image file to our own computer. Philip is Prof. Edelman's corgi. \"\"\" philip filename download url download to a local file. The filename is returned md\"\"\" Step 3 Using the `Images.jl` package loaded at the start of this notebook scroll up and take a look. we can load the file, which automatically converts it into usable data. We'll store the result in a variable. Remember the code is after the output. \"\"\" philip load philip filename md\" Hi there Philip \" md\"\"\" We see that the Pluto notebook has recognised that we created an object representing an image, and automatically displayed the resulting image of Philip, the cute Welsh Pembroke corgi and co professor of this course. Poor Philip will undergo quite a few transformations as we go along \"\"\" md\"\"\" 👉 Exercise change the url to use another image from the web. \"\"\" md\"\"\" Capturing an Image from your own camera \"\"\" md\"\"\" Even more fun is to use your own webcam. Try pressing the enable button below. Then press the camera to capture an image. Kind of fun to keep pressing the button as you move your hand etc. \"\"\" bind myface1 PlutoUI.WebcamInput help false, max size 150 myface1 myface1 , end 1 1 myface1 end 1 1, myface1 end 1 1, end 1 1 md\"\"\" Inspecting your data \"\"\" md\"\"\" Image size \"\"\" md\"\"\" The first thing we might want to know is the size of the image \"\"\" philip size size philip md\"\"\" Julia returns a pair of two numbers. Comparing these with the picture of the image, we see that the first number is the height, i.e. the vertical number of pixels, and the second is the width. \"\"\" philip height philip size 1 philip width philip size 2 md\"\"\" Locations in an image Indexing Now suppose that we want to examine a piece of the image in more detail. We need some way of specifying which piece of the image we want. Thinking of the image as a grid of pixels, we need a way to tell the computer which pixel or group of pixels we want to refer to. Since the image is a two dimensional grid, we can use two integers whole numbers to give the coordinates of a single pixel. Specifying coordinates like this is called indexing think of the index of a book, which tells you on which page an idea is discussed. In Julia we use square brackets, ` ` and ` ` for indexing \"\"\" a pixel philip 200, 100 md\"\"\" We see that Julia knows to draw our pixel object for us a block of the relevant color. When we index into an image like this, the first number indicates the row in the image, starting from the top, and the second the column , starting from the left. In Julia, the first row and column are numbered starting from 1, not from 0 as in some other programming languages. \"\"\" md\"\"\" We can also use variables as indices... \"\"\" md\"\"\" ...and these variables can be controlled by sliders \"\"\" bind row i Slider 1 size philip 1 , show value true bind col i Slider 1 size philip 2 , show value true row i,col i philip row i, col i md\"\"\" Locations in an image Range indexing We saw that we can use the row number and column number to index a single pixel of our image. Next, we will use a range of numbers to index multiple rows or columns at once, returning a subarray \"\"\" philip 550 650, 1 philip width md\"\"\" Here, we use `a b` to mean \" all numbers between `a` and `b` \". For example \"\"\" collect 1 10 md\"\"\" You can also use a ` ` without start and end to mean \" every index \" \"\"\" philip 550 650, md\"\"\" Let's get a single row of pixels \"\"\" philip 550, philip head philip 470 800, 140 410 md\"\"\" Scroll in on Philip's nose Use the widgets below slide left and right sides . \"\"\" bind range rows RangeSlider 1 size philip head 1 bind range cols RangeSlider 1 size philip head 2 nose philip head range rows, range cols md\"\"\" Process Modifying an image Now that we have access to image data, we can start to process that data to extract information and or modify it in some way. We might want to detect what type of objects are in the image, say to detect whether a patient has a certain disease. To achieve a high level goal like this, we will need to perform mid level operations, such as detecting edges that separate different objects based on their color. And, in turn, to carry that out we will need to do low level operations like comparing colors of neighboring pixels and somehow deciding if they are \"different\". \"\"\" md\"\"\" Representing colors We can use indexing to modify a pixel's color. To do so, we need a way to specify a new color. Color turns out to be a complicated concept, having to do with the interaction of the physical properties of light with the physiological mechanisms and mental processes by which we detect it We will ignore this complexity by using a standard method of representing colours in the computer as an RGB triple , i.e. a triple of three numbers r, g, b , giving the amount of red, of green and of blue in a colour, respectively. These are numbers between 0 none and 1 full . The final colour that we perceive is the result of \"adding\" the corresponding amount of light of each colour the details are fascinating, but beyond the scope of this course \"\"\" md\"\"\" We can create a new color in Julia as follows \"\"\" RGB 1.0, 0.0, 0.0 begin md\"\"\" A pixel with bind test r Scrubbable 0 0.1 1 default 0.1 red, bind test g Scrubbable 0 0.1 1 default 0.5 green and bind test b Scrubbable 0 0.1 1 default 1.0 blue looks like \"\"\" end RGB test r, test g, test b md\"\"\" Exercise 2.5 👉 Write a function `invert` that inverts a color, i.e. sends r, g, b to 1 r, 1 g, 1 b . \"\"\" function invert color AbstractRGB return missing end md\"Let's invert some colors \" color black RGB 0.0, 0.0, 0.0 invert color black color red RGB 0.8, 0.1, 0.1 invert color red md\"Can you invert the picture of Philip?\" philip inverted missing md\"\"\" Modifying a pixel Let's start by seeing how to modify an image, e.g. in order to hide sensitive information. We do this by assigning a new value to the color of a pixel \"\"\" let temp copy philip head temp 100, 200 RGB 1.0, 0.0, 0.0 temp end md\"\"\" Groups of pixels We probably want to examine and modify several pixels at once. For example, we can extract a horizontal strip 1 pixel tall \"\"\" philip head 50, 50 100 md\"\"\" Here, Julia is showing the strip as a collection of rectangles in a row. \"\"\" md\"\"\" And then modify it \"\"\" let temp copy philip head temp 50, 50 100 . RGB 1.0, 0.0, 0.0 temp end md\"\"\" Similarly we can modify a whole rectangular block of pixels \"\"\" let temp copy philip head temp 50 100, 50 100 . RGB 1.0, 0.0, 0.0 temp end md\"\"\" Exercise 1.2 👉 Generate a vector of 100 zeros. Change the center 20 elements to 1. \"\"\" function create bar return missing end if isdefined create bar not defined create bar else let result create bar if ismissing result still missing elseif isnothing result keep working md\"Did you forget to write `return`?\" elseif result isa Vector || length result 100 keep working md\"The result should be a `Vector` with 100 elements.\" elseif result 1,50,100 0,1,0 keep working else correct end end end md\"\"\" Reducing the size of an image \"\"\" md\"\"\" Maybe we would also like to reduce the size of this image, since it's rather large. For example, we could take every 10th row and every 10th column and make a new image from the result \"\"\" reduced image philip 1 10 end, 1 10 end md\"\"\" Note that the resulting image doesn't look very good, since we seem to have lost too much detail. Exercise Think about what we might do to reduce the size of an image without losing so much detail. \"\"\" md\"\"\" Model Creating synthetic images Think about your favorite Pixar movie e.g. Monsters Inc. Movie frames are images that are generated from complicated mathematical models. Ray tracing which may be covered in this class is a method for making images feel realistic. \"\"\" md\"\"\" Output Saving an image to a file Finally, we want to be able to save our new creation to a file. To do so, you can right click on a displayed image, or you can write it to a file. Fill in a path below \"\"\" save \"reduced phil.png\", reduced image md\"\"\" html\" br \" \"\"\" md\"\"\" Computer science Arrays An image is a concrete example of a fundamental concept in computer science, namely an array . Just as an image is a rectangular grid, where each grid cell contains a single color, an array is a rectangular grid for storing data. Data is stored and retrieved using indexing, just as in the image examples each cell in the grid can store a single \"piece of data\" of a given type. Dimension of an array An array can be one dimensional, like the strip of pixels above, two dimensional, three dimensional, and so on. The dimension tells us the number of indices that we need to specify a unique location in the grid. The array object also needs to know the length of the data in each dimension. Names for different types of array One dimensional arrays are often called vectors or, in some other languages, \"lists\" and two dimensional arrays are matrices . Higher dimensional arrays are tensors . Arrays as data structures An array is an example of a data structure , i.e. a way of arranging data such that we can access it. A key theme in computer science is that of designing different data structures that represent data in different ways. Conceptually, we can think of an array as a block of data that has a position or location in space. This can be a useful way to arrange data if, for example, we want to represent the fact that values in nearby locations in array are somehow near to one another. Images are a good example of this neighbouring pixels often represent different pieces of the same object, for example the rug or floor, or Philip himself, in the photo. We thus expect neighbouring pixels to be of a similar color. On the other hand, if they are not, this is also useful information, since that may correspond to the edge of an object. \"\"\" md\"\"\" Julia constructing arrays Creating vectors and matrices Julia has strong support for arrays of any dimension. Vectors, or one dimensional arrays, are written using square brackets and commas \"\"\" 1, 20, \"hello\" RGB 1, 0, 0 , RGB 0, 1, 0 , RGB 0, 0, 1 md\"\"\" Matrices, or two dimensional arrays, also use square brackets, but with spaces and new lines instead of commas \"\"\" RGB 1, 0, 0 RGB 0, 1, 0 RGB 0, 0, 1 RGB 0.5, 0.5, 0.5 md\"\"\" Array comprehensions It's clear that if we want to create an array with more than a few elements, it will be very tedious to do so by hand like this. Rather, we want to automate the process of creating an array by following some pattern, for example to create a whole palette of colors Let's start with all the possible colors interpolating between black, `RGB 0, 0, 0 `, and red, `RGB 1, 0, 0 `. Since only one of the values is changing, we can represent this as a vector, i.e. a one dimensional array. A neat method to do this is an array comprehension . Again we use square brackets to create an array, but now we use a variable that varies over a given range values \"\"\" RGB x, 0, 0 for x in 0 0.1 1 md\"\"\" Here, `0 0.1 1` is a range the first and last numbers are the start and end values, and the middle number is the size of the step. \"\"\" md\"\"\" In a similar way we can create two dimensional matrices, by separating the two variables for each dimension with a comma `,` \"\"\" RGB i, j, 0 for i in 0 0.1 1, j in 0 0.1 1 md\"\"\" Joining matrices We often want to join vectors and matrices together. We can do so using an extension of the array creation syntax \"\"\" philip head philip head philip head reverse philip head, dims 2 reverse philip head, dims 1 rot180 philip head md\"\"\" Pluto Interactivity using sliders \"\"\" md\"\"\" Suppose we want to see the effect of changing the number of colors in our vector or matrix. We could, of course, do so by manually fiddling with the range. It would be nice if we could do so using a user interface , for example with a slider . Fortunately, the Pluto notebook allows us to do so \"\"\" md\"\"\" We can define a slider using \"\"\" bind number reds Slider 1 100, show value true md\"\"\" The `Slider` type is defined in the `PlutoUI.jl` package. \"\"\" md\"\"\" This creates a new variable called `number reds`, whose value is the value shown by the slider. When we move the slider, the value of the variable gets updated. Since Pluto is a reactive notebook, other cells which use the value of this variable will automatically be updated too \"\"\" md\"\"\" Let's use this to make a slider for our one dimensional collection of reds \"\"\" RGB red value number reds, 0, 0 for red value in 0 number reds md\"\"\" When you move the slider, you should see the number of red color patches change \"\"\" md\"\"\" What is going on here is that we are creating a vector in which `red value` takes each value in turn from the range from `0` up to the current value of `number reds`. If we change `number reds`, then we create a new vector with that new number of red patches. \"\"\" md\"\"\" Exercise Make three sliders with variables `r`, `g` and `b`. Then make a single color patch with the RGB color given by those values. \"\"\" md\"\"\" We can do the same to create different size matrices, by creating two sliders, one for reds and one for greens. Try it out \"\"\" md\"\"\" Summary \"\"\" md\"\"\" Let's summarize the main ideas from this notebook Images are arrays of colors We can inspect and modify arrays using indexing We can create arrays directly or using array comprehensions \"\"\" begin colored line x Vector Real Gray. Float64. hcat x ' colored line x Any nothing end colored line create bar bigbreak html\" br br br br br \" bigbreak "}]