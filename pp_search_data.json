[{"url":"cheatsheets/","title":"Cheatsheets","tags":["welcome"],"text":"Cheatsheets Getting Started with Julia - live . Fastrack to Julia  cheatsheet. MATLAB-Julia-Python comparative cheatsheet  by  QuantEcon group Plots.jl cheatsheet"},{"url":".","title":"index","tags":["homepage"],"text":""},{"url":"installation/","title":"Software installation","tags":["welcome"],"text":"First-time setup: Install Julia & Pluto Text and pictures version: Step 1: Install Julia  1.8.2 Go to  https://julialang.org/downloads  and download the current stable release, Julia  1.8.2 , using the correct version for your operating system (Linux x86, Mac, Windows, etc). Step 2: Run Julia After installing,  make sure that you can run Julia . On some systems, this means searching for the “Julia  1.8.2 ” program installed on your computer; in others, it means running the command  julia  in a terminal. Make sure that you can execute  1 + 1 : Make sure that you are able to launch Julia and calculate  1+1  before proceeding! Step 3: Install  Pluto Next we will install the  Pluto , the notebook environment that we will be using during the course. Pluto is a Julia  programming environment  designed for interactivity and quick experiments. Open the  Julia REPL . This is the command-line interface to Julia, similar to the previous screenshot. Here you type  Julia commands , and when you press ENTER, it runs, and you see the result. To install Pluto, we want to run a  package manager command . To switch from  Julia  mode to  Pkg  mode, type  ]  (closing square bracket) at the  julia>  prompt: \njulia> ]\n\n(@v 1.8 ) pkg>\n The line turns blue and the prompt changes to  pkg> , telling you that you are now in  package manager mode . This mode allows you to do operations on  packages  (also called libraries). To install Pluto, run the following (case sensitive) command to  add  (install) the package to your system by downloading it from the internet.\nYou should only need to do this  once  for each installation of Julia: \n(@v 1.8 ) pkg> add Pluto\n This might take a couple of minutes, so you can go get yourself a cup of tea! You can now close the terminal. Step 4: Use a modern browser: Mozilla Firefox or Google Chrome We need a modern browser to view Pluto notebooks with. Firefox and Chrome work best. Second time:  Running Pluto & opening a notebook Repeat the following steps whenever you want to work on a project or homework assignment. Step 1: Start Pluto Start the Julia REPL, like you did during the setup. In the REPL, type: julia> using Pluto\n\njulia> Pluto.run()\n The terminal tells us to go to  http://localhost:1234/  (or a similar URL). Let’s open Firefox or Chrome and type that into the address bar. If you’re curious about what a  Pluto notebook  looks like, have a look at the  Featured Notebooks . These notebooks are useful for learning some basics of Julia programming. If you want to hear the story behind Pluto, have a look a the  JuliaCon presentation . If nothing happens in the browser the first time, close Julia and try again. And please let us know! Step 2a: Opening a notebook from the web This is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a  template notebook , available in this GitHub repository. To start from a template notebook on the web, you can  paste the URL into the blue box  and press ENTER. For example, homework 0 is available  here . Go to this page, and on the top right, click on the button that says “Edit or run this notebook”. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box. The first thing we will want to do is to save the notebook somewhere on our own computer; see below. Step 2b: Opening an existing notebook file When you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off. If you want to run a local notebook file that you have not opened before, then you need to enter its  full path  into the blue box in the main menu. More on finding full paths in step 3. Step 3: Saving a notebook We first need a folder to save our homework in. Open your file explorer and create one. Next, we need to know the  absolute path  of that folder. Here’s how you do that in  Windows ,  MacOS  and  Ubuntu . For example, you might have: C:\\Users\\fons\\Documents\\18S191_assignments\\  on Windows /Users/fons/Documents/18S191_assignments/  on MacOS /home/fons/Documents/18S191_assignments/  on Ubuntu Now that we know the absolute path, go back to your Pluto notebook, and at the top of the page, click on  “Save notebook…” . This is where you type the  new path+filename for your notebook : Click  Choose . Step 4: Sharing a notebook After working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas. \nconst run = f => f();\nrun(async () => {\nconst versions = await (await fetch(`https://julialang-s3.julialang.org/bin/versions.json`)).json()\nconst version_names = Object.keys(versions).sort().reverse()\nconst stable = version_names.find(v => versions[v].stable)\nconsole.log({stable})\nconst pkg_stable = /\\d+\\.\\d+/.exec(stable)[0]\ndocument.querySelectorAll(\"auto-julia-version\").forEach(el => {\n    console.log(el)\n    el.innerText = el.getAttribute(\"short\") == null ? stable : pkg_stable\n})\n});"},{"url":"logistics/","title":"Class logistics","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n Course logistics Describe here the logistics of your class."},{"url":"search/","title":"Search results","tags":[],"text":"window.init_search(); Search Results \nLoading..."},{"url":"assets/scripts/get_highlights/","title":"get_highlights","tags":[],"text":"if isempty get metadata \"homepage\" , \"highlights\", nothing else highlights htl \"\"\" section div class \"content\" h2 x \"name\" h2 p x \"text\" p div div class \"preview\" img src \" x \"img\" \" div section \"\"\" for x in metadata \"homepage\" \"highlights\" htl \"\"\" div class \"subjectscontainer wide\" h1 Highlights h1 div class \"contain\" highlights div div \"\"\" end"},{"url":"assets/scripts/get_subjects/","title":"get_subjects","tags":[],"text":"let sections metadata \"sidebar\" sections htl \"\"\" let input other page.input output other page.output name get output.frontmatter, \"title\", basename input.relative path desc get output.frontmatter, \"description\", nothing tags get output.frontmatter, \"tags\", String image get output.frontmatter, \"image\", nothing class \"no decoration\", \"tag replace x, \" \" \" \" \" for x in tags ..., image nothing || isempty image ? nothing htl \"\"\" a title desc class class href root url \" \" other page.url h3 name h3 img src image a \"\"\" end for other page in collections section id .pages \"\"\" for section id, section name in sections isempty sections ? nothing htl \"\"\" div class \"wide subjectscontainer\" h1 Subjects h1 div class \"subjects\" sections div div \"\"\" end"},{"url":"ch04_Radiation/ch4_radiation/","title":"ch4_radiation","tags":[],"text":" A Pluto.jl notebook v0.19.32 using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end time begin using Pkg Pkg.activate \".. .. pluto deployment environment\" Pkg.add \"PlutoUI\" using PlutoUI using Plots using Dates global functions deg2rad x x 180 pi rad2deg x x pi 180 function get md J date origin DateTime 2010, 1, 1, 0, 0, 0 Day J 1 Dates.format date origin, \"mm dd\" end function ssh2time ssh w hour ssh 2 w sec floor Int, w hour 3600 time begin DateTime 2000, 1, 1, 12, 0, 0 Dates.Second w sec time end DateTime 2000, 1, 1, 12, 0, 0 Dates.Second w sec time begin, time end time begin, time end Dates.format time begin, \"HH MM SS\" , Dates.format time end, \"HH MM SS\" time begin, time end end Solar Declination Angle （黄赤交角） function get σ J to deg false σ 0.409 . sin. 2 pi 365 J . 1.39 in rad if to deg σ rad2deg. σ end σ end end md\"\"\" 黄赤交角 σ 纬度 ϕ 时角 ω \"\"\" t 12 12 夜间0 12 ，第二天夜间为24 12 t collect 0 24 t2 t . 12 t2 . 15 ω deg2rad t2 . 15 length ω deg2rad t2 . 15 sinh sin ϕ sin σ . cos ϕ cos σ cos. ω plot sinh hline 0 , color \"black\" md\"\"\" doy bind J Slider 1 365 default 319, show value true lat bind lat Slider 90 0.1 90, default 30.5, show value true \"\"\" begin d r reverse relative Earth Sun distance I₀ ρ₀² function relativeDist J 1 . 0.033 . cos. 2 pi 365 J end plot relativeDist 1 365 , title \"doy J\", label \"\", framestyle box, ylab \"I₀ ρ₀²\", xlab \"Doy of Year DOY \" scatter J , relativeDist J , markersize 6, label \"\" end plot collect 1 J plot x begin plot get σ 1 365 to deg true , title \"doy J\", label \"\", framestyle box, ylab \"Solar Declination Angle\" scatter J , get σ J to deg true , markersize 6, label \"\" p angle SolarDecimation 1 10 end begin 太阳高度角sinh ω collect 2 pi 0.02 2 pi ϕ deg lat ϕ deg2rad ϕ deg ϕ 获取日出时间和日落时间，即sinh 0 function get ssh ϕ, J σ get σ. J rad2deg σ tmp tan. ϕ . tan. σ clamp tmp, 1, 1 constrain in the range of 1, 1 w acos. tmp w hour w pi 12 距离中午的时间 ssh w hour 2 end doy 1 365 time sunrise ssh2time get ssh ϕ, J 1 title \"Sunshine Duration lat ϕ deg, doy J, Year Month get md J , sunrise and sunset time sunrise\" plot doy, get ssh ϕ, doy , title title, label \"\" scatter J , get ssh ϕ, J , label \"\" get ssh ϕ, J end get σ J | rad2deg "},{"url":"climate_science/2d_advection_diffusion/","title":"Advection and diffusion in 2D","tags":["lecture","module3","PDE","differential equation","track_math","track_climate","structure","modeling","climate","simulation","fluid simulation","continuous","advection–diffusion"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 3 video \"https www.youtube.com watch?v DdTWgBlDgr0\" image \"https user images.githubusercontent.com 6933510 136200688 e3c6d6ee 808c 433f 8252 af6ad278fb4d.gif\" section 9 order 9 title \"Advection and diffusion in 2D\" layout \"layout.jlhtml\" youtube id \"DdTWgBlDgr0\" description \"\" tags \"lecture\", \"module3\", \"PDE\", \"differential equation\", \"track math\", \"track climate\", \"structure\", \"modeling\", \"climate\", \"simulation\", \"fluid simulation\", \"continuous\", \"advection–diffusion\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using Statistics using Plots using PlutoUI using OffsetArrays end TableOfContents md\"\"\" PDEs in 2D Heat transport by ocean currents \"\"\" html\"\"\" iframe width \"700\" height \"394\" src \"https www.youtube nocookie.com embed 6 GQuVopmUM?start 15\" frameborder \"0\" allow \"accelerometer autoplay clipboard write encrypted media gyroscope picture in picture\" allowfullscreen iframe \"\"\" md\"\"\" One dimensional advection diffusion Let's recall from the previous lecture that we derived the advection diffusion equation with one spatial dimension \\frac \\partial T x,t \\partial t U \\frac \\partial T \\partial x \\kappa \\frac \\partial^ 2 T \\partial x^ 2 , where T x, t is the temperature, U is a constant advective velocity and \\kappa is the heat diffusivity . Two dimensional advection diffusion The two dimensional advection diffusion equation adds advection and diffusion operators acting in a second spatial dimension y that is perpendicular to x . The temperature field T is then a function T T x, y, t , and the PDE becomes \\frac \\partial T x,y,t \\partial t u x,y \\frac \\partial T \\partial x v x,y \\frac \\partial T \\partial y \\kappa \\left \\frac \\partial^ 2 T \\partial x^ 2 \\frac \\partial^ 2 T \\partial y^ 2 \\right , where \\vec u x,y u, v u\\,\\mathbf \\hat x v\\,\\mathbf \\hat y is a velocity vector field, and each partial derivative is also a function of x , y and t . We will think of x as being the longitudinal direction positive from west to east and y as the latitudinal direction positive from south to north . \"\"\" begin reviewBox bind show review CheckBox default false md\"\"\" Review of multivariable calculus identities and notation Check the box for a review reviewBox \"\"\" end if show review md\"\"\" The two dimensional advection diffusion equation is often written more succinctly as \\frac \\partial T x,y,t \\partial t \\vec u \\cdot \\nabla T \\kappa \\nabla^ 2 T, using the following shorthand notation. The gradient operator is defined as \\nabla \\equiv \\left \\frac \\partial \\partial x , \\frac \\partial \\partial y \\right such that \\nabla T \\left \\frac \\partial T \\partial x , \\frac \\partial T \\partial y \\right and \\vec u \\cdot \\nabla T u, v \\cdot \\left \\frac \\partial T \\partial x , \\frac \\partial T \\partial y \\right u \\frac \\partial T \\partial x v\\frac \\partial T \\partial y . The Laplacian operator \\nabla^ 2 , sometimes denoted \\Delta , is defined as \\nabla^ 2 \\frac \\partial^ 2 \\partial x^ 2 \\frac \\partial^ 2 \\partial y^ 2 such that \\nabla^ 2 T \\frac \\partial^ 2 T \\partial x^ 2 \\frac \\partial^ 2 T \\partial y^ 2 . The divergence operator is defined as \\nabla \\cdot \\quad , such that \\nabla \\cdot \\vec u \\left \\frac \\partial \\partial x , \\frac \\partial \\partial x \\right \\cdot u,v \\frac \\partial u \\partial x \\frac \\partial v \\partial y . Note Since seawater is largely incompressible , we have \\nabla \\cdot \\vec u \\frac \\partial u \\partial x \\frac \\partial v \\partial y 0 , i.e. ocean currents are approximately a non divergent flow . Among other implications, this allows us to write \\begin align \\vec u \\cdot \\nabla T& u\\frac \\partial T x,y,t \\partial x v\\frac \\partial T x,y,t \\partial y \\newline & u\\frac \\partial T \\partial x v\\frac \\partial T \\partial y T\\left \\frac \\partial u \\partial x \\frac \\partial v \\partial y \\right \\newline & \\left u\\frac \\partial T \\partial x T\\frac \\partial u \\partial x \\right \\left v\\frac \\partial T \\partial y \\frac \\partial v \\partial y \\right \\newline & \\frac \\partial uT \\partial x \\frac \\partial vT \\partial x \\newline & \\nabla \\cdot \\vec u T \\end align using the product rule separately in both x and y . The flux form two dimensional advection diffusion equation This lets us finally re write the two dimensional advection diffusion equation as \\frac \\partial T \\partial t \\nabla \\cdot \\vec u T \\kappa \\nabla^ 2 T, which is the form we will use in our numerical algorithm below. \"\"\" end md\"\"\" Numerical solution of the 2D equation Discretizing advection in two dimensions In Lecture XX we saw that in one dimension we can discretize a first partial derivative in space using the centered finite difference \\frac \\partial T x i , t n \\partial x \\approx \\frac T i 1 ^ n T i 1 ^ n 2 \\Delta x . In two dimensions, we discretize the partial derivative the exact same way, except that we also need to keep track of the cell index j in the y dimension \\frac \\partial T x i , y j , t n \\partial x \\approx \\frac T i 1,\\, j ^ n T i 1,\\,j ^ n 2 \\Delta x . The x gradient kernel below, implemented using the `OffsetArray` type, is shown below, and is reminiscent of the edge detection or sharpening kernels used in image processing and machine learning \"\"\" md\"\"\" The first order partial derivative in y is similarly discretized as \\frac \\partial T x i , y j , t n \\partial y \\approx \\frac T i,\\, j 1 ^ n T i,\\,j 1 ^ n 2 \\Delta y . Its kernel is shown below. \"\"\" md\"\"\" Now that we have discretized the two derivate terms, we can write out the advective tendency for computing T i, j, n 1 as u\\frac \\partial T \\partial x v\\frac \\partial T \\partial y \\approx u i,\\, j ^ n \\frac T i,\\, j 1 ^ n T i,\\,j 1 ^ n 2 \\Delta y v i,\\, j ^ n \\frac T i,\\, j 1 ^ n T i,\\,j 1 ^ n 2 \\Delta y . We implement this in julia as a series of methods for the `advect` function. The first method computes the advective tendency as a single `Float64` type for the i,j grid cell while the second method returns an array of the tendencies for each grid cell using two nested for loops. \"\"\" md\"\"\" Discretizing diffusion in two dimensions Just as with advection, the process for discretizing the diffusion operators effectively consists of repeating the one dimensional process for x in a second dimension y , separately \\kappa \\left \\frac \\partial^ 2 T \\partial x^ 2 \\frac \\partial^ 2 T \\partial y^ 2 \\right \\kappa \\left \\frac T i 1,\\ j ^ n 2T i,\\ j ^ n T i 1,\\ j ^ n \\left \\Delta x \\right ^ 2 \\frac T i,\\ j 1 ^ n 2T i,\\ j ^ n T i,\\ j 1 ^ n \\left \\Delta y \\right ^ 2 \\right The corresponding x and y second derivative kernels are shown below \"\"\" md\"\"\" Just as we did with advection, we implement a `diffuse` function using multiple dispatch \"\"\" md\"\"\" No flux boundary conditions We want to impose the no flux boundary conditions, which states that u\\frac \\partial T \\partial x \\kappa \\frac \\partial T \\partial x 0 at x boundaries and v\\frac \\partial T \\partial y \\kappa \\frac \\partial T \\partial y 0 at the y boundaries. To impose this, we treat i 1 and i N x as ghost cells , which do not do anything expect help us impose these boundaries conditions. Discretely, the boundary fluxes between i 1 and i 2 vanish if \\dfrac T 2,\\,j ^ n T 1,\\,j ^ n \\Delta x 0 or T 1,\\,j ^ n T 2,\\,j ^ n . Thus, we can implement the boundary conditions by updating the temperature of the ghost cells to match their interior point neighbors \"\"\" function update ghostcells A Array Float64,2 option \"no flux\" Atmp view A , if option \"no flux\" A 1, Atmp 2, Atmp end, Atmp end 1, A , 1 Atmp , 2 Atmp , end Atmp , end 1 end end md\"Let's get a feel for what this is actually doing\" begin A rand Float64, 6,6 heatmap A, size 200, 200 end | as svg begin Acopy copy A update ghostcells Acopy heatmap Acopy, size 200, 200 end | as svg md\"\"\" Timestepping \"\"\" md\"\"\" Data structures \"\"\" begin struct Grid N Int64 L Float64 Δx Float64 Δy Float64 x Array Float64,2 y Array Float64,2 Nx Int64 Ny Int64 function Grid N, L Δx L N m Δy L N m x 0. Δx 2. Δx L Δx 2. x reshape x, 1, size x,1 y L Δy 2. Δy L Δy 2. y reshape y, size y,1 , 1 Nx, Ny size x, 2 , size y, 1 return new N, L, Δx, Δy, x, y, Nx, Ny end end Base.zeros G Grid zeros G.Ny, G.Nx end struct Parameters κ Float64 end abstract type ClimateModel end begin struct OceanModel ClimateModel G Grid P Parameters u Array Float64,2 v Array Float64,2 end OceanModel G, P OceanModel G, P, zeros G , zeros G OceanModel G OceanModel G, Parameters 1.e4 , zeros G , zeros G end begin mutable struct ClimateModelSimulation ModelType ClimateModel model ModelType T Array Float64,2 Δt Float64 iteration Int64 end ClimateModelSimulation C ModelType, T, Δt where ModelType ClimateModelSimulation ModelType C, T, Δt, 0 end md\"\"\" Simulating heat transport by advective & diffusive ocean currents \"\"\" md\" Simulation controls \" begin quiverBox bind show quiver CheckBox default false anomalyBox bind show anomaly CheckBox default false md\"\"\" Click to show the velocity field quiverBox or to show temperature anomalies instead of absolute values anomalyBox \"\"\" end begin U ex Slider bind U ex Slider 4 1 8, default 0, show value false md\"\"\" U ex Slider \"\"\" end begin md\" Vary the current speed U 2. ^U ex × reference \" end begin κ ex Slider bind κ ex Slider 0. 1.e3 1.e5, default 1.e4, show value true md\"\"\" Vary the diffusivity κ κ ex Slider m² s \"\"\" end bind go ex Clock 0.1 md\"\"\" Some unit tests for verification \"\"\" function CFL adv sim ClimateModelSimulation maximum sqrt. sim.model.u.^2 sim.model.v.^2 sim.Δt sim.model.G.Δx end md\"\"\" Appendix \"\"\" Nvec 1 25 function plot state sim ClimateModelSimulation clims 1.1, 1.1 , show quiver true, show anomaly false, IC nothing model sim.model grid sim.model.G p plot xlabel \"longitudinal distance km \", ylabel \"latitudinal distance km \", clabel \"Temperature\", yticks grid.L 1000e3 grid.L , Int64. 1e 3 grid.L 1000e3 grid.L , xticks 0 1000e3 grid.L , Int64. 1e 3 0 1000e3 grid.L , xlims 0., grid.L , ylims grid.L, grid.L , X repeat grid.x, grid.Ny, 1 Y repeat grid.y, 1, grid.Nx if show anomaly arrow col black maxdiff maximum abs. sim.T . IC heatmap p, grid.x , grid.y , sim.T . IC, clims 1.1, 1.1 , color balance, colorbar title \"Temperature anomaly °C \", linewidth 0., size 400, 530 else arrow col white heatmap p, grid.x , grid.y , sim.T, color thermal, levels clims 1 clims 2 clims 1 21. clims 2 , colorbar title \"Temperature °C \", clims clims, linewidth 0., size 400, 520 end annotate p, 50e3, 6170e3, text string \"t \", Int64 round sim.iteration sim.Δt 60 60 24 , \" days\" , color black, left, 9 if show quiver Nq grid.N ÷ 5 quiver p, X Nq 1 ÷2 Nq end , Y Nq 1 ÷2 Nq end , quiver grid.L 4 . model.u Nq 1 ÷2 Nq end , model.v Nq 1 ÷2 Nq end , color arrow col, alpha 0.7 end as png p end md\"\"\" Computing the velocity field for a single circular vortex \"\"\" begin ∂x ϕ, Δx ϕ ,2 end ϕ ,1 end 1 Δx ∂y ϕ, Δy ϕ 2 end, ϕ 1 end 1, Δy xpad ϕ hcat zeros size ϕ,1 , ϕ, zeros size ϕ,1 ypad ϕ vcat zeros size ϕ,2 ', ϕ, zeros size ϕ,2 ' xitp ϕ 0.5 ϕ ,2 end ϕ ,1 end 1 yitp ϕ 0.5 ϕ 2 end, ϕ 1 end 1, function diagnose velocities ψ, G u xitp ∂y ψ, G.Δy G.L v yitp ∂x ψ, G.Δx G.L return u, v end end function impose no flux u, v u 1, . 0. v 1, . 0. u end, . 0. v end, . 0. u ,1 . 0. v ,1 . 0. u ,end . 0. v ,end . 0. end function PointVortex G Ω 1., a 0.2, x0 0.5, y0 0. x reshape 0. G.Δx G.L G.Δx G.L 1. G.Δx G.L , 1, G.Nx 1 y reshape 1. G.Δy G.L G.Δy G.L 1. G.Δy G.L , G.Ny 1, 1 function ψ̂ x,y r sqrt. y . y0 .^2 . x . x0 .^2 stream Ω 4 r.^2 stream r . a Ω a^2 4 1. . 2 log. r r . a a return stream end u, v diagnose velocities ψ̂ x, y , G impose no flux u, v return u, v end md\"\"\" Computing a quasi realistic ocean velocity field \\vec u u, v Our velocity field is given by an analytical solution to the classic wind driven gyre problem, which is given by solving the fourth order partial differential equation \\epsilon M \\hat \\nabla ^ 4 \\hat \\Psi \\frac \\partial \\hat \\Psi \\partial \\hat x \\nabla \\times \\hat \\tau \\mathbf z , where the hats denote that all of the variables have been non dimensionalized and all of their constant coefficients have been bundles into the single parameter \\epsilon M \\equiv \\dfrac \\nu \\beta L^3 . The solution makes use of an advanced asymptotic method valid in the limit that \\epsilon \\ll 1 known as boundary layer analysis see MIT course 18.305 to learn more . \"\"\" function DoubleGyre G β 2e 11, τ₀ 0.1, ρ₀ 1.e3, ν 1.e5, κ 1.e5, H 1000. ϵM ν β G.L^3 ϵ ϵM^ 1 3. x reshape 0. G.Δx G.L G.Δx G.L 1. G.Δx G.L , 1, G.Nx 1 y reshape 1. G.Δy G.L G.Δy G.L 1. G.Δy G.L , G.Ny 1, 1 ψ̂ x,y π sin. π y 1 . x exp. x 2 ϵ . cos. √3 x 2 ϵ . 1. √3 sin. √3 x 2 ϵ . ϵ exp. x . 1. ϵ u, v τ₀ ρ₀ β G.L H . diagnose velocities ψ̂ x, y , G impose no flux u, v return u, v end md\"\"\" Some simple initial temperature fields \"\"\" linearT G 0.5 1. . y G.L for y in G.y , 1 , x in G.x 1, function InitBox G value 1., nx 2, ny 2, xspan false, yspan false T zeros G T G.Ny÷2 ny G.Ny÷2 ny, G.Nx÷2 nx G.Nx÷2 nx . value if xspan T G.Ny÷2 ny G.Ny÷2 ny, . value end if yspan T , G.Nx÷2 nx G.Nx÷2 nx . value end return T end begin G Grid 10, 6.e6 P Parameters κ ex u, v zeros G , zeros G u, v PointVortex G, Ω 0.5 u, v DoubleGyre G IC InitBox G IC InitBox G, xspan true IC linearT G model OceanModel G, P, u 2. ^U ex, v 2. ^U ex Δt 12 60 60 ocean sim ClimateModelSimulation model, copy IC , Δt end begin heat capacity 51. total heat content sum heat capacity ocean sim.T ocean sim.model.G.Δx ocean sim.model.G.Δy 1e 15 mean temp mean ocean sim.T end begin go ex md\"\"\" Let's make sure our model conserves energy. We have not added any energy to the system advection and diffusion just move the energy around. The total heat content is round total heat content, digits 3 peta Joules and the average temperature is round mean temp, digits 2 °C. \"\"\" end md\" The CFL condition The CFL condition is defined by \\text CFL \\dfrac \\max\\left \\sqrt u² v² \\right Δt Δx round CFL adv ocean sim , digits 2 \" plot kernel A heatmap collect A , color bluesreds, clims maximum abs. A , maximum abs. A , colorbar false, xticks false, yticks false, size 30 30 size A, 2 , 30 30 size A, 1 , xaxis false, yaxis false begin xgrad kernel OffsetArray reshape 1., 0, 1. , 1, 3 , 0 0, 1 1 plot kernel xgrad kernel end begin ygrad kernel OffsetArray reshape 1., 0, 1. , 3, 1 , 1 1, 0 0 plot kernel ygrad kernel end begin function advect T, u, v, Δy, Δx, j, i return . u j, i . sum xgrad kernel 0, 1 1 . T j, i 1 i 1 2Δx . v j, i . sum ygrad kernel 1 1, 0 . T j 1 j 1, i 2Δy end advect T, u, v, Δy, Δx advect T, u, v, Δy, Δx, j, i for j 2 size T, 1 1, i 2 size T, 2 1 advect T, O OceanModel advect T, O.u, O.v, O.G.Δy, O.G.Δx end begin xdiff kernel OffsetArray reshape 1., 2., 1. , 1, 3 , 0 0, 1 1 ydiff kernel OffsetArray reshape 1., 2., 1. , 3, 1 , 1 1, 0 0 plot kernel xdiff kernel , plot kernel ydiff kernel end begin function diffuse T, κ, Δy, Δx, j, i return κ. sum xdiff kernel 0, 1 1 . T j, i 1 i 1 Δx^2 sum ydiff kernel 1 1, 0 . T j 1 j 1, i Δy^2 end diffuse T, κ, Δy, Δx diffuse T, κ, Δy, Δx, j, i for j 2 size T, 1 1, i 2 size T, 2 1 diffuse T, O OceanModel diffuse T, O.P.κ, O.G.Δy, O.G.Δx end function timestep sim ClimateModelSimulation OceanModel update ghostcells sim.T tendencies advect sim.T, sim.model . diffuse sim.T, sim.model sim.T 2 end 1, 2 end 1 . sim.Δt tendencies sim.iteration 1 end for i in 1 50 timestep ocean sim end let go ex if ocean sim.iteration 0 timestep ocean sim else for i in 1 50 timestep ocean sim end end plot state ocean sim, clims 0.1, 1 , show quiver show quiver, show anomaly show anomaly, IC IC end tvec map Nvec do Npower G Grid 8 Npower, 6.e6 P Parameters κ ex u, v DoubleGyre G u, v PointVortex G, Ω 0.5 u, v zeros G , zeros G model OceanModel G, P, u, v IC InitBox G IC InitBox G, nx G.Nx÷2 1 IC linearT G Δt 6 60 60 S ClimateModelSimulation model, copy IC , Δt return elapsed timestep S end begin plot 8 Nvec, tvec, xlabel \"Number of Grid Cells in x direction \", ylabel \"elapsed time per timestep s \" end | as svg "},{"url":"climate_science/advection_and_diffusion/","title":"Advection and diffusion in 1D","tags":["lecture","module3","advection–diffusion","climate","modelling","PDE","differential equation","track_math","track_climate","simulation","plotting","fluid simulation","continuous"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 3 video \"https www.youtube.com watch?v Xb iUwXI78A\" image \"https user images.githubusercontent.com 6933510 136200627 8211654f 7730 4f4a 8933 5b64164806c3.gif\" section 7 order 7 title \"Advection and diffusion in 1D\" layout \"layout.jlhtml\" youtube id \"Xb iUwXI78A\" description \"\" tags \"lecture\", \"module3\", \"advection–diffusion\", \"climate\", \"modelling\", \"PDE\", \"differential equation\", \"track math\", \"track climate\", \"simulation\", \"plotting\", \"fluid simulation\", \"continuous\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end using Plots, PlutoUI, LinearAlgebra TableOfContents depth 4 md\"\"\" Evolution in time and space Advection and diffusion in 1D \"\"\" md\"\"\" So far we have been looking at dynamics in time, for example how does the temperature of the Earth change over time. But the Earth does not have a single, uniform temperature rather, at a particular moment in time, different places on Earth are at different temperatures, and those different temperatures change over time due to several mechanisms. In this notebook we will look at two fundamental mechanisms advection and diffusion . Let's think about the temperature in the ocean. Since the ocean is a fluid that is in motion, a warm \"parcel\" of water can flow move to a new location due to the physical motion of the water itself this is advection . And even if the water doesn't move, temperature or a higher concentration of some substance dissolved in the fluid can spread out due to molecular mechanisms this is diffusion . \"\"\" md\"\"\" In this notebook we will restrict ourselves to one spatial dimension 1D . So we will think about the temperature T , for example, being a function T t, x of two independent variables time, t space, x We want to calculate a value of the temperature T for each possible pair of values t, x , i.e. for all time 0 and all positions. The temperature at a given point will change due to different physical processes. We need to model this by writing down equations describing each physical process and how it affects the temperature. Since there are now two independent variables, t and x , we can expect to end up with derivatives with respect to both of these variables, so that the rate of change of temperature in time at a given point depends also on gradients of the temperature in space . This will lead to a partial differential equation that relates partial derivatives of T . In the context of climate modelling, we can think of x as being the latitude , supposing that the temperature is the same at all points with the same latitude. In this way we could model the fact that the poles are cold and the equator is warm, and we could model how heat flows from hot to cold. However, we clearly cannot model actual ocean currents like this, which would require two, or even three, spatial dimensions. \"\"\" md\"\"\" Visualising advection diffusion \"\"\" md\"\"\" Here is a visualisation of the physical processes of advection and diffusion in one dimension that we will discuss and build during this notebook. \"\"\" md\"\"\" U bind UU Slider 1 0.01 1, show value true, default 0 D bind DD Slider 0.2 0.001 0.2, show value true, default 0 \"\"\" md\"\"\" Temperature profiles and discretization \"\"\" md\"\"\" An ordinary differential equation needs an initial value for each variable. Similarly, we will need an initial function T 0 x that gives us the temperature at each position x . Let's suppose that the position is restricted to the interval 0, L x . As usual, to represent the continuous function T 0 x on a computer, we will need to discretise it in some way, i.e. approximate the continuous function by a finite set of numbers in the computer. The simplest but far from the only discretisation method is to sample the function at discrete grid points or nodes x i , for i 1, \\dots, N x . For simplicity we will take these equally spaced, with spacing x i 1 x i \\delta x L x N x . \"\"\" md\"\"\" For example, let's consider the following initial temperature profile \"\"\" T₀ x sin 2π x ^2 0.5 T₀ x sin 2π x 2 cos 4π x 0.2 md\"\"\" and define the grid points as follows \"\"\" begin Nₓ 20 Lₓ 1.0 δx Lₓ Nₓ xs δx 2 δx Lₓ end xs md\"\"\" It turns out to be a good idea to take the grid points at the centre of each interval, so that we have N x intervals and N x grid points, starting at x 1 \\delta x 2 and finishing at x N L x \\delta x 2 . \"\"\" md\"\"\" We call such a function of x at a given time a temperature profile . Let's draw it both as a function and as a heatmap \"\"\" md\"\"\" We will denote by T^0 i the initial temperature at grid point number i . \"\"\" md\"\"\" A useful way to think about T^n i is as some kind of spatial average of T t n, x over the interval of positions between neighbouring grid points, so T i is the average over the interval between x i \\frac \\delta x 2 and x i \\frac \\delta x 2 . We can thus think of the following piecewise constant approximation to the original continuous function \"\"\" let δx xs 2 xs 1 p plot 0 0.001 Lₓ, T₀, label \"T₀\", lw 1, ls dash scatter xs, T₀. xs , label \"sampled\" scatter xs, zero. xs , label \"x nodes\", alpha 0.5, ms 3, lw 2 for i in 1 length xs plot xs i δx 2, T₀ xs i , xs i δx 2, T₀ xs i , c green, lw 4, lab false plot xs i δx 2, 0 , xs i δx 2, T₀ xs i , xs i δx 2, T₀ xs i , xs i δx 2, 0 , c green, lw 1, lab false, ls dash, alpha 0.3 end xlabel \"x\" ylabel \"T₀ x \" end md\"\"\" Advection \"\"\" md\"\"\" Now let's think of this profile as representing the temperature in each small volume, or \"parcel\", of fluid. Let's suppose that the fluid is moving to the right with a constant, uniform speed U . Uniform here means that the speed is the same in all parts of the fluid. Then the temperature profile should also move with the fluid We call a quantity, such as the temperature, that is carried along with the fluid a tracer . If we fix our attention at a single, fixed point in space, say the grid point x i , the temperature there will vary over time, due to the fact that the fluid is moving past it. How it varies in time depends on the values at neighbouring grid points, since they determine how much heat will be transported into and out of the current cell. The point of view where we fix our attention at one point in space is called Eulerian . The alternative is to follow a parcel of fluid as it moves along in space this is called Lagrangian . \"\"\" md\"\"\" Visualising fluxes in a fluid \"\"\" md\"\"\" Let's visualise what happens as the fluid moves past a grid point, or rather the cell centered at a grid point. We will visualise tracer particles moving inside the fluid \"\"\" N 5000 begin xx abs. 2 . 4 . rand N .^ 2 . 1.5 yy rand N end δ 0.8 md\"\"\" show particles entering and leaving in \\delta t bind show particles CheckBox \"\"\" md\"\"\" t bind t Slider 0 0.001 2, show value true, default 0 \"\"\" md\"\"\" Time stepping \"\"\" md\"\"\" We want to model how the temperature profile changes in time due to the flow of the fluid. We'll do so by looking at each cell and asking how much heat enters and leaves the cell in a given time step, of duration \\delta t . \"\"\" md\"\"\" Let's call T^n i the approximate unknown average value of T in the cell at position x i and at the n th time step t n , i.e. an approximation of T t n, x i , where t n n \\, \\delta t . Then T^ n 1 i \\simeq T t n \\delta t, x i and T^ n i 1 \\simeq T t n, x i \\delta x . Note that the superscript n in these algorithms does not mean a power it's just a label for the time step. We could write T i^ n instead, but that is annoying to both write and read, so we omit the parentheses. \"\"\" md\"\"\" Suppose the fluid is moving to the right with speed U . During a time step of duration \\delta t , the temperature T^n i at cell i changes for two reasons some heat enters cell i some heat leaves cell i Note that most of the fluid that starts within cell i remains within that cell during the time step if the time step is short enough , as we see from the visualisation above. To calculate how much heat enters and leaves, note that only heat in the region of fluid within a distance U \\, \\delta t from the boundary of the cell will cross into that cell. So a proportion U \\, \\delta t \\delta x of the amount in cell i crosses the boundary. We will blur the distinction between \"amount of heat\" and temperature. Hence, roughly an amount T^n i U \\delta t \\delta x will leave cell number i and cross into cell i 1 the cell to the right . Similarly, an amount T^n i 1 U \\delta t \\delta x will enter cell i from the neighbouring cell i 1 on the left. Hence we arrive at the following T^ n 1 i T^ n i T^n i 1 T^n i \\, U \\, \\delta t \\delta x. Note that on the right hand side we have quantities at the time step n , and on the left at time step n 1 . So this tells us how to update our quantities from slice n to slice n 1 . \"\"\" md\"\"\" Continuous limit Advection equation PDE \"\"\" md\"\"\" Rearranging the previous equation we get \\frac T^ n 1 i T^ n i \\delta t \\frac T^n i 1 T^n i \\delta x \\, U. \"\"\" md\"\"\" Taking the continuum limit when \\delta t \\to 0 and \\delta x \\to 0 , we recognise the definition of partial derivatives with respect to time and space variables from multivariable calculus. Note the different indices that change on the two sides of the equation. Denoting these partial derivatives using \\partial , we arrive at the advection equation \\frac \\partial T t, x \\partial t U \\frac \\partial T t, x \\partial x , or for short \\frac \\partial T \\partial t U \\frac \\partial T \\partial x . Since T is a function of both x and t , and this equation involves partial derivatives with respect to both of the independent variables, this is a partial differential equation PDE . It describes how the function T t, x changes continuously as a function both of time and space. Although there are some analytical methods to solve PDEs, often it's necessary to use numerical methods. Here we'll look at simple numerical methods to solve such equations. \"\"\" md\"\"\" Numerics for the advection equation \"\"\" md\"\"\" Let's return to the version of the equation in which the value at the following time step is isolated T^ n 1 i T^ n i \\left U \\frac \\delta t \\delta x \\right T^n i T^n i 1 . In the last term on the right hand side, we see that we require combinations of values of T at the same time step from different places, with certain coefficients. \"\"\" md\"\"\" There are many approaches to implementing this numerically. The simplest is to directly transcribe the equation for the i th entry of the vector. Calling `T` the current vector, i.e. \\mathbf T ^n T^n i i 1, \\ldots, N x , and `T′` the new vector at the next time step, we have the following basic expression T′ i T i δt U T i 1 T i δx But now we realise a problem What should we do when i 1 ? This will try to access the index 0 of the vector `T`, which does not exist \"\"\" md\"\"\" Boundary conditions This illustrates the necessity of choosing boundary conditions that specify what happens at the edge of the domain. For simplicity we will choose to use periodic boundary conditions . This is a convenient mathematical fiction that allows us to treat all cells as being on the same footing, by wrapping the system around a torus, so that cells i 1 and i N x are neighbours. \"\"\" md\"\"\" We can then write this as follows, where we separate out the case i 1 \"\"\" function advection T, δt, δx, U N length T T′ similar T create new vector of the same length bulk cells for i in 2 N T′ i T i δt U T i T i 1 δx end boundary cells T′ 1 T 1 δt U T 1 T N δx periodic return T′ end md\"\"\" This performs a single time step of the advection equation it takes in the current vector of T s and returns the new T s after the step. Note that this is just like a step of the Euler method for solving ODEs, but where many spatial coordinates are updated at the same time. Effectively we are solving a system of coupled ODEs \"\"\" δt 0.001 U 0.2 assign colours to particles cs map xx do x if U δ x 0 1 elseif 1 U δ x 1 2 else 0 end end begin plot 0, 1, 1, 0, 0 , 0, 0, 1, 1, 0 , series shape, alpha 0.5, fill true, ratio 1, label false, leg false new xx xx . U . t scatter xx . U . t, yy, ms 1.5, alpha 0.1, c gray if show particles scatter new xx cs . 0 , yy cs . 0 , ms 1.5, alpha 0.5, c cs cs . 0 end plot 1.5, 2 , 0, 0 , c black plot 1.5, 2 , 1, 1 , c black xlims 2, 2 ylims 0.1, 1.1 as svg plot axis true, yticks 0, 1 end md\"\"\" Unfortunately this does not behave as we expect instead of preserving the shape of the profile over time, it is decaying. This is due to the way we are approximating. A better way to discretize the spatial derivative is using the following centered difference \\frac \\partial T t n, x i \\partial x \\simeq \\frac T^n i 1 T^n i 1 2 \\delta x \"\"\" function advection2 T, δt, δx, U N length T T′ similar T create new vector of the same length for i in 2 N 1 T′ i T i δt U T i 1 T i 1 2δx end periodic boundary T′ 1 T 1 δt U T 2 T N 2δx T′ N T N δt U T 1 T N 1 2δx return T′ end md\"\"\" Diffusion \"\"\" md\"\"\" Another key physical process is diffusion . This models how temperature or mass spreads out from hot or high concentration regions towards regions where it is cold or where there is a low concentration. Physical mechanism Random walks The physical mechanism behind this is random motion this is the continuous limit of equations describing the evolution of the probability distribution in space and time of a cloud of random walkers. This is the same process that we studied in lecture 2.6. Using our current notation, there we showed that the probability distribution of a cloud of random walkers satisfies the following time evolution p^ n 1 i \\frac 1 2 p^n i 1 p^n i 1 If now we say that the walkers jump only with a certain probability, with a large probability to stay in the same place, and that these random walkers are the carriers of heat, then we get T^ n 1 i \\kappa T^n i 1 2 T^n i T^n i 1 . Watch this video https www.youtube.com watch?v a3V0BJLIo c from last semester's class to see Grant Sanderson explaining this. \"\"\" md\"\"\" Continuous limit Heat equation PDE \"\"\" md\"\"\" Introducing \\delta x as the spatial discretisation, and \\delta t as the time step, we get T^ n 1 i \\kappa \\frac \\delta t \\delta x^2 T^n i 1 2 T^n i T^n i 1 . \"\"\" md\"\"\" The continuous limit is the following heat equation or diffusion equation \"\"\" md\"\"\" \\frac \\partial T \\partial t \\kappa \\frac \\partial^2 T \\partial x^2 . \"\"\" md\"\"\" Here, \\kappa is the heat diffusivity , which says how quickly heat spreads out. In the context of diffusion of mass the equivalent is the diffusion coefficient , D . \"\"\" md\"\"\" To obtain a numerical method to solve this equation, we again need to discretise this, in particular the second derivative. One possible discretisation is \\frac \\partial^2 T \\partial x^2 t n, x i \\simeq \\frac T^n i 1 2 T^n i T^n i 1 \\delta x^2 . \"\"\" md\"\"\" This may again be transcribed directly into code \"\"\" function diffusion T, δt, δx, D N length T T′ similar T create new vector of the same length for i in 2 N 1 T′ i T i δt D T i 1 2T i T i 1 δx^2 end periodic boundary T′ 1 T 1 δt D T 2 2T 1 T N δx^2 T′ N T N δt D T 1 2T N T N 1 δx^2 return T′ end bind n4 Slider 1 length evolution4 , show value true md\"\"\" The advection diffusion PDE \"\"\" md\"\"\" Finally we can combine both mechanisms, to describe a tracer that is both being advected at a constant speed and diffusing. This basically utilises the composition of the advection and diffusion functions \"\"\" function advection diffusion T, δt, δx, U, D temp advection2 T, δt, δx, U return diffusion temp, δt, δx, D end md\"\"\" Function library \"\"\" function temperature heatmap x, T p heatmap x, 0. , collect T' , clims 1., 1. , cbar false, xticks nothing, yticks nothing return p end begin p1 plot 0 0.001 Lₓ, T₀, label \"T₀\", lw 3 scatter xs, T₀. xs , label \"sampled\" scatter xs, zero. xs , label \"x nodes\", alpha 0.5, ms 3 xlabel \"x\" ylabel \"T₀\" for x in xs plot x, 0 , x, T₀ x , ls dash, c black, label \"\", alpha 0.5 end hline 0 , ls dash, lab false p2 temperature heatmap xs, T₀. xs plot p1, p2, layout grid 2, 1, heights 0.9, 0.1 end function evolve method, xs, δt, U, t final 10.0, f₀ T₀ T f₀. xs δx xs 2 xs 1 t 0.0 ts t results T while t t final T′ method T, δt, δx, U new push results, T′ t δt push ts, t T copy T′ end return ts, results end tt, results evolve advection diffusion, xs, δt, UU, DD md\"\"\" time step bind n6 Slider 1 length results , show value true \"\"\" ts, evolution evolve advection, xs, δt, U bind n Slider 1 length evolution , show value true let p1 plot xs, evolution n , m o, xlim 0, 1 , ylim 1.1, 1.1 , title \"t round ts n , digits 2 \", leg false p2 temperature heatmap xs, evolution n plot p1, p2, layout grid 2, 1, heights 0.9, 0.1 end ts2, evolution2 evolve advection2, xs, δt, 0.1 n2 slider bind n2 Slider 1 length evolution2 , show value true let p1 plot xs, evolution2 n2 , m o, xlim 0, 1 , ylim 3.1, 3.1 , title \"t round ts2 n2 , digits 2 \", leg false p2 temperature heatmap xs, evolution2 n2 plot p1, p2, layout grid 2, 1, heights 0.9, 0.1 end bind n3 Slider 1 length evolution2 , show value true ts3, evolution3 evolve diffusion, xs, δt, 0.01 let p1 plot xs, results n6 , m o, xlim 0, 1 , ylim 3.1, 3.1 , title \"t round ts3 n3 , digits 2 \", leg false p2 temperature heatmap xs, results n6 plot p1, p2, layout grid 2, 1, heights 0.9, 0.1 , clim 1, 1 end let p1 plot xs, evolution3 n3 , m o, xlim 0, 1 , ylim 3.1, 3.1 , title \"t round ts3 n3 , digits 2 \", leg false p2 temperature heatmap xs, evolution3 n3 plot p1, p2, layout grid 2, 1, heights 0.9, 0.1 , clim 1, 1 end let p1 plot xs, evolution4 n4 , m o, xlim 0, 1 , ylim 0.1, 1.1 , title \"t round ts3 n3 , digits 2 \", leg false p2 temperature heatmap xs, evolution4 n4 plot p1, p2, layout grid 2, 1, heights 0.9, 0.1 , clim 1, 1 end ts5, evolution5 evolve advection diffusion, xs, δt, 1.0, 0.01 bind n5 Slider 1 length evolution5 , show value true let p1 plot xs, evolution5 n5 , m o, xlim 0, 1 , ylim 1.1, 1.1 , title \"t round ts3 n3 , digits 2 \", leg false p2 temperature heatmap xs, evolution5 n5 plot p1, p2, layout grid 2, 1, heights 0.9, 0.1 , clim 1, 1 end "},{"url":"climate_science/climate2_snowball_earth/","title":"Snowball Earth and hysteresis","tags":["lecture","module3","dynamics","track_math","track_climate","hysteresis","equilibrium","climate","modeling","differential equation","ODE","plotting","feedback","runaway","nonlinear","snowball earth"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 3 video \"https www.youtube.com watch?v cdIgr 2nUvI\" image \"https user images.githubusercontent.com 6933510 136199703 5edb4791 f9c0 4872 b0a7 7c9b1b6502d5.png\" section 6 order 6 title \"Snowball Earth and hysteresis\" layout \"layout.jlhtml\" youtube id \"cdIgr 2nUvI\" description \"\" tags \"lecture\", \"module3\", \"dynamics\", \"track math\", \"track climate\", \"hysteresis\", \"equilibrium\", \"climate\", \"modeling\", \"differential equation\", \"ODE\", \"plotting\", \"feedback\", \"runaway\", \"nonlinear\", \"snowball earth\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using DifferentialEquations, Plots, PlutoUI, LinearAlgebra end TableOfContents depth 4 md\"\"\" Julia Concepts `sign x ` \"\"\" md\"\"\" The sign or signum latin for \"sign\" function \"\"\" md\"\"\" `sign x ` returns 0 if x is 0, or ±1 for positive negative x. \"\"\" begin scatter sign, 5 .1 5, legend false, m c, ms 3, size 600, 300 title \"The sign function is discontinuous at 0\" xlabel \"x\" ylabel \"sign x \" end sign Inf sign Inf md\"\"\" Mathematics multiple equilibria. Using computation to explore hysteresis. \"\"\" md\"\"\" The function f y,a \\rm sign y a y can be written ``f y,a \\left\\ \\begin array l 1 a y \\ \\ \\rm if \\ y 0 \\ \\ \\textrm root at a 1 \\textrm if a 1 \\\\ \\ \\ \\ 1 a y \\ \\ \\rm if \\ y 0 \\ \\ \\textrm root at a 1 \\textrm if a 1 \\end array \\right.`` we will ignore y 0 . Notice that for 1 a 1 there are two roots. \"\"\" begin f y,a sign y a y f y,a,t f y,a just for the difeq solver end md\"\"\" The graph of `z f y,a ` consists of two parallel half planes. On the left below we intersect that graph with planes of constant `a`. On the right, we have the intersection with `z 0`. \"\"\" md\"\"\" a bind a Slider 5 .1 5, show value true, default 0 \"\"\" begin plot y f y,a, 0 , 9, eps , xlabel \"y\" , ylabel \"sign y y a\", lw 3,color blue plot y f y,a, 0 , eps ,9, lw 3, color blue ylims 5,10 xlims 9,9 hline 0 , ls dash, color pink, legend false if a 1 annotate 2.2 a, 4, text round 1 a,digits 1 , position right,11, red scatter 1 a , 0 ,m circle,ms 10,color red end if a 1 annotate 1 a, 4, text round 1 a,digits 1 , position right,11, blue scatter 1 a , 0 ,m circle,ms 10,color blue end vline 1 a , ls dash, color gray vline 1 a , ls dash, color gray vline 0 ,ls dash, color pink P1 title \" Plot of f y,a a vs y\" begin plot a a 1, 5 1, lw 2, c blue annotate a, 3 a, \"a a\" plot a a 1, 1 5, lw 2, c blue, legend false xlabel \"a\" ylabel \"y\" title \"Solution to f y,a 0\" if a 1 annotate 4, .7 a, text round 1 a,digits 1 , position center,11, red hline 1 a ,c gray,ls dash scatter a , 1 a ,m circle,ms 10,color red end if a 1 annotate 4, 1.3 a, text round 1 a,digits 1 , position center,11, blue hline 1 a ,c gray,ls dash scatter a , 1 a ,m circle,ms 10,color blue end ylims 5,5 P2 annotate 0, 4.7, text \"Two roots if 1 a 1\",6, blue vline a ,c gray,ls dash plot P1 ,P2,layout 1, 2 end end md\"\"\" The above are two section views of the surface z f y,a . Left constant a. Right z 0. \"\"\" begin s1 surface 5 .1 .1, 4 .1 4, f, legend false s2 surface .00001 .1 4.1, 4 .1 4, f, legend false surface 6 .05 4, 5 .05 4, f, legend false, alpha .5 plot 0, 6 , 1, 5 , 0,0 , c red plot 0,5 , 1, 4 , 0,0 , c red xlabel \"y\" ylabel \"a\" end gr md\"\"\" Solution to y' f y,a with y 0 y₀ \"\"\" md\"\"\" y₀ bind y₀ Slider 6 .1 6, show value true, default 2.0 \"\"\" sol solve ODEProblem f, y₀, 0, 10.0 , a function plotit y₀, a sol solve ODEProblem f, y₀, 0, 10.0 , a p plot sol , legend false, background color inside black , ylims 7, 7 , lw 3, c red plot direction field xs Float64 ys Float64 lrx LinRange xlims p ..., 30 for x in lrx for y in LinRange ylims p ..., 30 v 1, f y, a ,x v . 100 lrx 2 lrx 1 push xs, x v 1 , x v 1 , NaN push ys, y v 2 , y v 2 , NaN end end if a 1 hline 1 a ,c white,ls dash end if a 1 hline 1 a ,c white,ls dash end hline 0 ,c pink,ls dash plot xs, ys, alpha 0.7, c yellow ylabel \"y\" annotate .5,y₀,text \"y₀\",color red if a 1 annotate 5,1 a,text round 1 a,digits 3 ,color white end if a 1 annotate 5, 1 a .4,text round 1 a,digits 3 ,color white end title \"Solution to y' f y,a \" return p end plotit y₀, a md\"\"\" Hysteresis Increasing then decreasing ``a`` Let's increase a by .25 from 4 to 4 then decrease from 4 to 4. Every time we change a, we let 10 units of time evolve, enough to reach the equilibriumf for that a, and watch the y values. We see that when 1 a 1 it's possible to be at the \"negative\" equilibrium or the \"positive\" equilibrium, depending on how you got there. \"\"\" let Δt 10 t 0.0 y₀ 5 a 4 sol solve ODEProblem f, y₀, t, t Δt , a p plot sol annotate 10, 5,text \"a \",7 for i 1 32 a .25 t Δt y₀ sol t sol solve ODEProblem f, y₀, t, t Δt , a if 1≤a ≤1 p plot sol,xlims 0, t , legend false, fillrange 5,fillcolor gray,alpha .5 else p plot sol,xlims 0, t , legend false end if i%4 0 annotate t, 5,text round a,digits 1 , 7, blue end end for i 1 32 a .25 t Δt y₀ sol t sol solve ODEProblem f, y₀, t, t Δt , a if 1≤a≤1 p plot sol,xlims 0, t , legend false, fillrange 5,fillcolor gray,alpha .5 else p plot sol,xlims 0, t , legend false end if i%4 0 annotate t, 5,text round a,digits 1 , 7, red end end ylabel \"y\" as svg plot end md\"\"\" The dependence of the state of a system on its history, what we observe above, is known as hysteresis Greek ὑστέρησις for lagging behind . \"\"\" md\"\"\" Application to Snowball Earth, the ice albedo feedback from Henri Drake's lecture Review of the last climate lecture. Recall from Lecture 20 Part I https www.youtube.com watch?v Gi4ZZVS2GLA&t 15s that the the zero dimensional energy balance equation is \\begin gather \\color brown C \\frac dT dt \\ \\color black \\ \\color orange \\frac 1 α S 4 \\ \\color black \\ \\color blue A BT \\ \\color black \\ \\color grey a \\ln \\left \\frac \\text CO ₂ \\text CO ₂ \\text PI \\right , \\end gather \"\"\" html\"\"\" img src \"https raw.githubusercontent.com hdrake hdrake.github.io master figures planetary energy balance.png\" height 230 \"\"\" md\"\"\" Today, we will ignore changes in CO₂, so that \\ln \\left \\frac \\text CO ₂ \\text PI \\text CO ₂ \\text PI \\right \\ln 1 0 and the model simplifies to \\begin gather \\color brown C \\frac dT dt \\ \\color black \\ \\color orange \\frac 1 α S 4 \\ \\color black \\ \\color blue A BT . \\end gather The dynamics of this Ordinary Differential Equation ODE are quite simple because it is linear we can rewrite it in the form \\dot T f T t where f x \\alpha x \\beta is a linear function of x. A linear ODE permits only one stable solution, \\dot T 0 , which in Lecture 20 we found was Earth's pre industrial temperature T 0 14 °C. In this lecture, we show how a small modification that makes one term in our simple climate model non linear completely changes its dynamics, allowing us to explain the existence of both \"Snowball Earth\" and the relatively warm pre industrial climate that allowed humans to thrive. \"\"\" md\"\"\" 1 Background Snowball Earth Geological evidence shows that the Neoproterozoic Era 550 to 1000 million years ago is marked by two global glaciation events, in which Earth's surface was covered in ice and snow from the Equator to the poles see review by Pierrehumbert et al. 2011 https www.annualreviews.org doi full 10.1146 annurev earth 040809 152447 . \"\"\" html\"\"\" img src \"https news.cnrs.fr sites default files styles asset image full public assets images frise earths glaciations 72dpi.jpg?itok MgKrHlIV\" height 500 \"\"\" html\"\"\" img src \"https upload.wikimedia.org wikipedia commons d df Ice albedo feedback.jpg\" height 350 \"\"\" md\"\"\" We can represent the ice albedo feedback crudely in our energy balance model by allowing the albedo to depend on temperature \\alpha T \\begin cases \\alpha i & \\mbox if \\ \\ T \\leq 10\\text °C &\\text completely frozen \\\\ \\alpha i \\alpha 0 \\alpha i \\frac T 10 20 & \\mbox if \\ \\ 10\\text °C \\leq T \\leq 10\\text °C &\\text partially frozen \\\\ \\alpha 0 &\\mbox if \\ \\ T \\geq 10\\text °C &\\text no ice \\end cases \"\"\" md\"\"\" 1.2 Adding the ice albedo feedback to our simple climate model First, we program albedo as a function of temperature. \"\"\" md\"\"\" To add this function into our energy balance model from Lecture 20 Part I https www.youtube.com watch?v Gi4ZZVS2GLA&t 15s which we've copied into the cell below , all we have to do is overwrite the definition of the `timestep ` method to specify that the temperature dependent albedo should be updated based on the current state \"\"\" module Model const S 1368 solar insolation W m^2 energy per unit time per unit area const α 0.3 albedo, or planetary reflectivity unitless const B 1.3 climate feedback parameter W m^2 °C , const T0 14. preindustrial temperature °C absorbed solar radiation α α, S S S 1 α 4 W m^2 outgoing thermal radiation T A A, B B A B T const A S 1. α 4 B T0 W m^2 . greenhouse effect CO2 a a, CO2 PI CO2 PI a log CO2 CO2 PI const a 5.0 CO2 forcing coefficient W m^2 const CO2 PI 280. preindustrial CO2 concentration parts per million ppm CO2 const t CO2 PI constant CO2 concentrations const C 51. atmosphere and upper ocean heat capacity J m^2 °C function timestep ebm append ebm.T, ebm.T end ebm.Δt tendency ebm append ebm.t, ebm.t end ebm.Δt end tendency ebm 1. ebm.C absorbed solar radiation α ebm.α, S ebm.S outgoing thermal radiation ebm.T end , A ebm.A, B ebm.B greenhouse effect ebm.CO2 ebm.t end , a ebm.a, CO2 PI ebm.CO2 PI begin mutable struct EBM T Array Float64,1 t Array Float64,1 Δt Float64 CO2 Function C Float64 a Float64 A Float64 B Float64 CO2 PI Float64 α Float64 S Float64 end Make constant parameters optional kwargs EBM T Array Float64,1 , t Array Float64,1 , Δt Float64, CO2 Function C C, a a, A A, B B, CO2 PI CO2 PI, α α, S S EBM T, t, Δt, CO2, C, a, A, B, CO2 PI, α, S Construct from float inputs for convenience EBM T0 Float64, t0 Float64, Δt Float64, CO2 Function C C, a a, A A, B B, CO2 PI CO2 PI, α α, S S EBM T0 , t0 , Δt, CO2 C C, a a, A A, B B, CO2 PI CO2 PI, α α, S S end begin function run ebm EBM, end year Real while ebm.t end end year timestep ebm end end run ebm run ebm, 200. run for 200 years by default end CO2 hist t CO2 PI 1 . fractional increase t fractional increase t t . 1850. 220 .^3 begin hist EBM T0, 1850., 1., CO2 hist, C C, B B, A A run hist, 2020. end begin CO2 RCP26 t CO2 PI 1 . fractional increase t . min. 1., exp. t . 1850. . 170 100 RCP26 EBM T0, 1850., 1., CO2 RCP26 run RCP26, 2100. CO2 RCP85 t CO2 PI 1 . fractional increase t . max. 1., exp. t . 1850. . 170 100 RCP85 EBM T0, 1850., 1., CO2 RCP85 run RCP85, 2100. end end md\"\"\" 1.1 The ice albedo feedback In Lecture 20, we used a constant value α Model.hist.α for Earth's planetary albedo, which is a reasonable thing to do for small climate variations relative to the present such as the difference between the present day and preindustrial climates . In the case of large variations, however, this approximation is not very reliable. While oceans are dark and absorbant, α ocean \\approx 0.05 , ice and snow are bright and reflective \\alpha ice,\\,snow \\approx 0.5 to 0.9 . Thus, if much of the ocean's surface freezes over, we expect Earth's albedo to rise dramatically, causing more sunlight to be reflected to space, which in turn causes even more cooling and more of the ocean to freeze, etc. This non linear positive feedback effect is referred to as the ice albedo feedback see illustration below . \"\"\" function α T α0 Model.α, αi 0.5, ΔT 10. if T ΔT return αi elseif ΔT T ΔT return αi α0 αi T ΔT 2ΔT elseif T ΔT return α0 end end begin T example 20. 1. 20. plot size 600, 400 , ylims 0.2, 0.6 plot 20, 10 , 0.2, 0.2 , fillrange 0.6, 0.6 , color lightblue, alpha 0.2, label nothing plot 10, 20 , 0.2, 0.2 , fillrange 0.6, 0.6 , color red, alpha 0.12, label nothing plot T example, α. T example , lw 3., label \"α T \", color black plot ylabel \"albedo α\\n planetary reflectivity \", xlabel \"Temperature °C \" annotate 15.5, 0.252, text \"completely\\nfrozen\", 10, darkblue annotate 15.5, 0.252, text \"no ice\", 10, darkred annotate 0.3, 0.252, text \"partially frozen\", 10, darkgrey end function Model.timestep ebm ebm.α α ebm.T end Added this line append ebm.T, ebm.T end ebm.Δt Model.tendency ebm append ebm.t, ebm.t end ebm.Δt end md\"\"\" 2 Multiple Equilibria OR the existence of \"alternate Earths\" Human civilization flourished over the last several thousand years in part because Earth's global climate has been remarkably stable and forgiving. The preindustrial combination of natural greenhouse effect and incoming solar radiation yielded temperatures between the freezing and boiling points of water across most of the planet, allowing ecoystems based on liquid water to thrive. The climate system, however, is rife with non linear effects like the ice albedo effect , which reveal just how fragile our habitable planet is and just how unique our stable pre industrial climate was. We learned in Lecture 20 that in response to temperature fluctuations, net negative feedbacks act to restore Earth's temperature back towards a single equilibrium state in which absorbed solar radiation is balanced by outgoing thermal radiation. Here, we explore how non linear positive feedbacks can temporarily result in a net positive feedback and modify Earth's state space. \"\"\" md\"\"\" 2.1 Exploring the non linear ice albedo feedback In Lecture 20 Part II https www.youtube.com watch?v D3jpfeQCISU , we learned how introducing non linear terms in ordinary differential equations can lead to complex state spaces that allow for multiple fixed points e.g. for \\dot x \\mu x^ 2 . Let's explore how this plays out with the non linear ice albedo feedback by varying the initial condition T 0 \\equiv T t 0 and allowing the system to evolve for 200 years. \"\"\" begin T0 slider bind T0 interact Slider 60. 0.0025 30., default 24., show value true md\"\"\" T₀ T0 slider °C\"\"\" end begin ebm interact Model.EBM Float64 T0 interact , 0., 1., Model.CO2 const Model.run ebm interact, 200 end md\"We can get an overview of the behavior by drawing a set of these curves all on the same graph \" begin p equil plot xlabel \"year\", ylabel \"temperature °C \", legend bottomright, xlims 0, 205 , ylims 60, 30. plot 0, 200 , 60, 60 , fillrange 10., 10. , fillalpha 0.3, c lightblue, label nothing annotate 120, 20, text \"completely frozen\", 10, darkblue plot 0, 200 , 10, 10 , fillrange 30., 30. , fillalpha 0.09, c red, lw 0., label nothing annotate 120, 25, text \"no ice\", 10, darkred for T0 sample in 60. 5. 30. ebm Model.EBM T0 sample, 0., 1., Model.CO2 const Model.run ebm, 200 plot p equil, ebm.t, ebm.T, label nothing end T un 7.5472 for δT in 1.e 2 2, 1., 0., 1., 2. ebm un Model.EBM T un δT, 0., 1., Model.CO2 const Model.run ebm un, 200 plot p equil, ebm un.t, ebm un.T, label nothing, linestyle dash end plot p equil, 200 , Model.T0 , markershape circle, label \"Our pre industrial climate stable ''warm'' branch \", color orange, markersize 8 plot p equil, 200 , 38.3 , markershape circle, label \"Alternate universe pre industrial climate stable ''cold'' branch \", color aqua, markersize 8 plot p equil, 200 , T un , markershape diamond, label \"Impossible alternate climate unstable branch \", color lightgrey, markersize 8, markerstrokecolor white, alpha 1. p equil end md\"We see that for T₀ ⪆ round T un, digits 2 °C, all of the curves seem to converge on the T 14°C equilibrium or fixed point that we saw in Lecture 20. Curves that start below this value warm up and while curves that start above this value will cool down. For T₀ ⪅ round T un, digits 2 °C, however, the temperatures converge on a much colder equilibrium around T 40°C. This is the Snowball Earth equilibrium. These two states are referred to as stable equilibria because even if the state gets temporarily pushed slightly away from its equilibrium, it will eventually converge right back to its equilibrium. So what happens is T₀ ≈ round T un, digits 2 °C? For some exact temperature near there, there is indeed an equilibrim state if you start with that temperature you will stay there forever. However, if the temperature starts off even one one hundredth of a degree above or below this exact value, we see that temperatures eventually converge to one of the other two equilibria. Thus, we call this intermediate equilibrium an unstable equilibrium , because any infinitesimal push away will cause it to careen away towards another state. \" md\"\"\" 2.2 Radiative stability analysis We can understand why our model has two stable equilibria and one unstable equilibrium by applying concepts from dynamical systems theory. Recall that, with fixed CO₂ concentrations, our energy balance model differential equation can be expressed as C\\frac d\\,T d\\,t \\text ASR T \\text OTR T , where now the Absorbed Solar Radiation ASR is also temperature dependent because the albedo α T is. In particular, by plotting the right hand side tendency terms as a function of the state variable T , we can plot a stability diagram for our system that tells us whether the planet will warm C \\frac d\\,T d\\,t 0 or cool C \\frac d\\,T d\\,t 0 . \"\"\" begin T samples 60. 1. 30. OTR Model.outgoing thermal radiation. T samples ASR Model.absorbed solar radiation. α α T sample for T sample in T samples imbalance ASR . OTR end begin p1 stability plot legend topleft, ylabel \"energy flux W m² \", xlabel \"temperature °C \" plot p1 stability, T samples, OTR, label \"Outgoing Thermal Radiation\", color blue, lw 2. plot p1 stability, T samples, ASR, label \"Absorbed Solar Radiation\", color orange, lw 2. p2 stability plot ylims 50, 45 , ylabel \"energy flux W m² \", xlabel \"temperature °C \" plot 60., 30. , 100, 100 , fillrange 0, 0 , color blue, alpha 0.1, label nothing plot 60., 30. , 100, 100 , fillrange 0, 0 , color red, alpha 0.1, label nothing annotate 58, 40, text \"cooling\", left, darkblue annotate 58, 38, text \"warming\", left, darkred plot p2 stability, T samples, imbalance, label \"Radiative Imbalance\\n ASR OTR \", color black, lw 2. plot 7.542 , 0 , markershape diamond, markersize 6, color lightgrey, markerstrokecolor darkgrey, label nothing plot Model.T0 , 0 , markershape circle, markersize 6, color orange, markerstrokecolor black, label nothing plot 38.3 , 0 , markershape circle, markersize 6, color aqua, markerstrokecolor black, label nothing p stability plot p1 stability, p2 stability, layout 1, 2 , size 680, 300 end md\" 3 Transitioning to and from Snowball Earth 3.1 Turning up the Sun Over the entire history of the Earth, the Sun is thought to have brightened by about 40%.\" html\"\"\" img src \"https rainbow.ldeo.columbia.edu courses s4021 ec98 fys.gif\" alt \"Plot showing increasing solar luminosity over time\" height 300 \"\"\" md\"In the Neoproterozoic ~700 million years ago , the Sun was 93% as bright as it is today, such that the incoming solar radiation was S 1272 W m², Earth's average temperature plunged to T 50 °C, and Earth's ice covered surface had a high albedo reflectivity of α i 0.5 . 3.2 Did the increasing brightness of the Sun melt the Snowball? If we start out in the Neoproterozoic climate and all we do is increase solar insolation to today's value of S 1368 W m², can we warm the planet up to the pre industrial temperature of T 14 °C? \" md\"\"\" Extend upper limit of insolation bind extend S CheckBox default false \"\"\" if extend S md\"\"\" \"Cold\" branch bind show cold CheckBox default false | \"Warm\" branch bind show warm CheckBox default false | Unstable branch bind show unstable CheckBox default false \"\"\" else show cold true nothing end if extend S md\"\"\" Abrupt climate transitions In this model, temperature variations are fairly smooth unless temperatures rise above 10°C or fall below 10°C, in which case the ice albedo positive feedback kicks in and causes an abrupt climate transition . While this is just a simple hypothetical model, these kinds of abrupt climate transitions show up all the time in the paleoclimate record and in more realistic climate model simulations. https www.pnas.org content pnas 115 52 13288 F1.large.jpg This simulation teaches us that we should not take the stability of our climate for granted and that pushing our present climate outside of its historical regime of stability could trigger catastrophic abrupt climate transitions. \"\"\" end md\"\"\" 3.3 If not the Sun, how did Snowball Earth melt? The leading theory is that a slow but steady outgassing of CO₂ from volcanoes eventually caused a strong enough greenhouse gas effect to offset the cooling effect of the frozen surface's high albedo and raise temperatures above the melting point 10 °C. \"\"\" html\"\"\" img src \"https hartm242.files.wordpress.com 2011 03 snowball earth.jpg\" width 680 \"\"\" md\"\"\" In Homework 9 , you will extend the above model to include the effect of CO₂ and determine how much CO2 would need to be added to the snowball for it to melt. \"\"\" md\"\"\" 4 Towards realistic climate modelling In this simple model, the preindustrial climate of T 14 °C is so warm that there is no ice anywhere on the planet. Indeed, the only two valid stable climates are one with no ice or one with ice everywhere . So how did Earth's preindustrial climate, which was relatively stable for thousands of years, have substantial ice caps at the poles? \"\"\" md\"\"\" The \"Aquaplanet\", a simple three dimensional ocean world climate model An \"Aquaplanet\" is a three dimensional global climate simulation of a hypothetical planet covered entirely by a single global Ocean. While this is of course very different from Earth, where 27% of the planet is covered in land, the \"Aquaplanet\" exhibits many of the same characteristics as Earth and is much more realistic than our zero dimensional climate model above. The video below shows that the Aquaplanet simulation exhibits a third equilibrium state, with a mostly liquid ocean but ice caps at the poles , in addition to the two we found in our zero dimensional model. In Homework 10 2020 class , you will build a simple two dimensional version of the aqua planet and explore its stability. \"\"\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid lYm IyBHMUs params \"modestbranding 1&rel 0\" lite youtube \"\"\" md\"\"\" Appendix \"\"\" md\" Pluto Magic\" function ingredients path String this is from the Julia source code evalfile in base loading.jl but with the modification that it returns the module instead of the last object name Symbol basename path m Module name Core.eval m, Expr toplevel, eval x Expr core, eval name, x , include x Expr top, include name, x , include mapexpr Function, x Expr top, include mapexpr, name, x , include path m end md\"\"\" Bifurcation diagram helper functions \"\"\" function restart ebm ebm ebm.T ebm.T end ebm.t ebm.t 1 end function plot trajectory p, x, y lw 8 n size x,1 plot x, y, color \"black\", alpha collect 1 n 1 n 1. , linewidth collect 0. lw n lw , label nothing plot x end , y end , color \"black\", marker c, markersize lw 2 1.2, label nothing, markerstrokecolor nothing, markerstrokewidth 0. return p end begin Smin 1200 Smax 1800 Smax limited 1650 Svec Smin 1. Smax Svec vcat Svec, reverse Svec Tvec zeros size Svec local T restart 100. for i, S enumerate Svec ebm Model.EBM T restart, 0., 5., Model.CO2 const ebm.S S Model.run ebm, 400. T restart ebm.T end Tvec i deepcopy T restart end md\" Data structures for storing warm & cool branch climates \" end md\"\"\" For insolations S between Smin W m² and Smax limited W m², temperatures always remain below 10°C and the planet remains completely frozen. What if we extend the upper limit on insolation so that the Sun becomes bright enough to start melting ice? \"\"\" begin T unstable branch S, A, B, αi, α0 A B S 4B 1 0.5 αi α0 1 S αi α0 80B S unstable Smin 2 Smax T unstable T unstable branch. S unstable, Model.A, Model.B, 0.5, 0.3 T unstable .~ 0.3 . α. T unstable . 0.5 . NaN md\" Unstable branch solution \" end function add labels p plot p, xlabel \"year\", ylabel \"temperature °C \", legend bottomright, xlims 5, 205 , ylims 60, 30. plot p, 5, 200 , 60, 60 , fillrange 10., 10. , fillalpha 0.3, c lightblue, label nothing annotate 120, 20, text \"completely frozen\", 10, darkblue plot p, 5, 200 , 10, 10 , fillrange 30., 30. , fillalpha 0.09, c red, lw 0., label nothing annotate p, 120, 25, text \"no ice\", 10, darkred end begin p interact plot ebm interact.t, ebm interact.T, label nothing, lw 3 plot 0. , T0 interact , label nothing, markersize 4, markershape circle add labels p interact end | as svg begin Sneo Model.S 0.93 Tneo 48. md\" Initial conditions \" end begin if extend S solarSlider bind S Slider Smin 2. Smax, default Sneo md\"\"\" Smin W m² solarSlider Smax W m²\"\"\" else solarSlider bind S Slider Smin 2. Smax limited, default Sneo md\"\"\" Smin W m² solarSlider Smax limited W m²\"\"\" end end begin md\"\"\" Move the slider below to change the brightness of the Sun solar insolation S S W m² \"\"\" end begin ebm Model.EBM Tneo, 0., 5., Model.CO2 const ebm.S Sneo ntraj 10 Ttraj repeat NaN , ntraj Straj repeat NaN , ntraj md\" Data structures for storing trajectories of recent climates \" end begin S warming mask 1 size Svec 1 . size Svec . 2 p plot xlims Smin, Smax limited , ylims 55, 75 , title \"Earth's solar insolation bifurcation diagram\" plot Model.S, Model.S , 55, 75 , color yellow, alpha 0.3, lw 8, label \"Pre industrial present insolation\" if extend S plot p, xlims Smin, Smax if show cold plot Svec warming mask , Tvec warming mask , color blue,lw 3., alpha 0.5, label \"cool branch\" end if show warm plot Svec . warming mask , Tvec . warming mask , color \"red\", lw 3., alpha 0.5, label \"warm branch\" end if show unstable plot S unstable, T unstable, color darkgray, lw 3., alpha 0.4, ls dash, label \"unstable branch\" end end plot legend topleft plot xlabel \"solar insolation S W m² \", ylabel \"Global temperature T °C \" plot Model.S , Model.T0 , markershape circle, label \"Our preindustrial climate\", color orange, markersize 8 plot Model.S , 38.3 , markershape circle, label \"Alternate preindustrial climate\", color aqua, markersize 8 plot Sneo , Tneo , markershape circle, label \"neoproterozoic 700 Mya \", color lightblue, markersize 8 plot trajectory p, reverse Straj , reverse Ttraj , lw 9 plot Smin, Smax , 60, 60 , fillrange 10., 10. , fillalpha 0.3, c lightblue, label nothing annotate Smin 12, 19, text \"completely\\nfrozen\", 10, darkblue, left plot Smin, Smax , 10, 10 , fillrange 80., 80. , fillalpha 0.09, c red, lw 0., label nothing annotate Smin 12, 15, text \"no ice\", 10, darkred, left end | as svg begin S restart ebm ebm ebm.S S Model.run ebm, 500 insert Straj, 1, copy S pop Straj insert Ttraj, 1, copy ebm.T end pop Ttraj end "},{"url":"climate_science/odes_and_parameterized_types/","title":"ODEs and parameterized types","tags":["lecture","module3","epidemiology","plotting","ODE","differential equation","track_julia","track_math","programming","DifferentialEquations","type","structure","track_climate"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 3 video \"https www.youtube.com watch?v S71YIZ8e7MQ\" image \"https user images.githubusercontent.com 6933510 136199713 25eb2e90 c5cd 4e11 8463 6f6069a81a51.png\" section 2 order 2 title \"ODEs and parameterized types\" layout \"layout.jlhtml\" youtube id \"S71YIZ8e7MQ\" description \"\" tags \"lecture\", \"module3\", \"epidemiology\", \"plotting\", \"ODE\", \"differential equation\", \"track julia\", \"track math\", \"programming\", \"DifferentialEquations\", \"type\", \"structure\", \"track climate\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end using DifferentialEquations, Plots, PlutoUI, MappedArrays TableOfContents md\"\"\" Julia concepts Using libraries Libraries are built around types and objects Plot recipes Defining how to plot our objects Making objects into callable functions Parameterized types \"\"\" md\"\"\" ODEs and parameterized types \"\"\" md\"\"\" In the previous lecture we started to look at Ordinary Differential Equations ODEs . These are equations relating a function to its derivatives, telling us how to move at each moment in time. For example, exponential decay is modelled by \\dot u p \\, u, in other words \\dot u t p \\, u t for all real t \\ge 0 , with initial condition u 0 u 0 where u t is the number of light bulbs still functioning at time t , the number of radioactive nuclei that have not yet decayed, or the number of people who are still infectious and have not yet recovered. The parameter p is the decay rate. We saw that time stepping methods provide a class of numerical methods for solving such initial value problems, of which the Euler method is the simplest example. Unfortunately the Euler method is not a good choice, since it is not accurate enough. In numerical analysis classes like 18.330 https github.com mitmath 18330 various better methods are derived. Fortunately those methods are available in a Julia library or package, `DifferentialEquations.jl`. \"\"\" md\"\"\" The `DifferentialEquations.jl` library \"\"\" md\"\"\" DifferentialEquations.jl https diffeq.sciml.ai v2.0 often abbreviated as DiffEq is a Julia library for solving many types of differential equations. It has become the best most complete and fastest general library for solving ordinary differential equations and many other types in any programming environment. It is also a very good example of the way that Julia libraries are often structured. We will see some basic usage examples and how Julia types are used both to control the library and to store the input and output to the solvers . \"\"\" md\"\"\" Basic usage of DifferentialEquations.jl \"\"\" md\"\"\" Let's try to solve the above equation that we derived in the previous lecture, \\dot u p \\, u . We are using u as the name of the dependent variable for consistency with the `DifferentialEquations.jl` documentation and internal structure. We write a general ODE in 1 variable as \\dot u f p t, u . The right hand side of the ODE is given by a function f , which may depend on a parameter p , i.e. a constant which does not change for any given run of the ODE. f may also depend explicitly on time. In our example we do indeed have a parameter p that we want to change, but f does not have an explicit time dependence, so we write \"\"\" f u, p, t p u md\"\"\" Note that you always need the three input arguments `u`, `p` and `t`, in that order, even if you don't use them. \"\"\" md\"\"\" Now we define our initial condition u 0 and the time span to integrate over, given as a tuple initial\\ time, final\\ time \"\"\" begin u0 100.0 time span 0.0, 10.0 end md\"\"\" To set up the problem instance we use a type `ODEProblem` that is defined in the `DifferentialEquations.jl` package, into which we pass all the information necessary to define the problem. The parameters must go in the following order \"\"\" md\"\"\" For more advanced use there are also some additional, optional, keyword arguments. Note that the displayed output does not currently include information about the function, nor the parameters. \"\"\" md\"\"\" To solve the ODE we call the `solve` function \"\"\" md\"\"\" What happened here? A suitable solver i.e. an algorithm to calculate the solution was chosen automatically , and it chose certain moments in time at which to output information about the approximate, but very accurate solution. In this particular case it chose to output data at only eight points in time between t 0 and t 10 . Let's try to plot the `solution` object \"\"\" md\"\"\" Plot recipes \"\"\" md\"\"\" Two surprising things happen. Firstly, there is no reason to expect this to have worked `solution` is some kind of Julia object, but somehow `Plots.jl` knows how to plot it. This is because `DifferentialEquations.jl` defines a plot recipe . This specifies a way to turn solution objects into plots Any package can do this relatively easily. \"\"\" md\"\"\" The second surprise is that the output looks like a smooth curve, rather than just 8 points. Let's see those points on top of the curve. We can extract the relevant data from the `solution` object \"\"\" md\"\"\" We see that the package in fact gives not only the value at those points, but it is in fact also capable of calculating an approximate solution at any intermediate point, using interpolation . In fact, we can access this by treating `solution` as if it were a function \"\"\" md\"\"\" For this particular ODE we know the analytical solution. Let's compare them as we vary the parameter p \"\"\" md\"\"\" p bind p Slider 0.0 0.1 2.0, show value true \"\"\" problem ODEProblem f, u0, time span, p solution solve problem plot solution, size 500, 300 , label \"solution\" scatter solution.t, solution.u, label \"discrete output\" begin tt 3.5 solution tt end scatter tt , solution tt , label \"t tt \", ms 5, m square let problem ODEProblem f, u0, time span, p solution solve problem plot solution, linewidth 3, xlabel \"t\", yaxis \"x t \", label \"numerical\", size 500, 300 plot t u0 exp p t , lw 3, ls dash, label \"exact\" ylims 0, 100 title \"p p\" end md\"\"\" We see that the numerical and exact solutions are to the eye indistinguishable, and that the package is fast enough to calculate the solution basically in real time. \"\"\" md\"\"\" Systems of ODEs \"\"\" md\"\"\" Now let's try to solve the SIR equations \\begin aligned \\dot s & \\beta s i \\\\ \\dot i & \\beta s i \\gamma i\\\\ \\dot r & \\gamma i \\end aligned \"\"\" md\"\"\" We need to think of the system in a vector form, \\dot \\mathbf x \\mathbf f \\mathbf p t, \\mathbf x , where the vector \\mathbf x is a vector of all the variables, \\mathbf x x 1, x 2, x 3 s, i, r the function \\mathbf f is a vector valued function \\mathbb R ^3 \\to \\mathbb R ^3 , where f k gives the right hand side of the equation for \\dot x k and the vector \\mathbf p \\beta, \\gamma is a vector of the parameters. \"\"\" x0 0.99, 0.01, 0.0 function SIR x, p, t s, i, r x unpack the vectors into scalar values β, γ p build a new vector to return return β s i, β s i γ i, γ i end md\"\"\" Now we see that the solverr has recognised that everything is a vector, and it returns a vector at each time stamp. Again we can plot \"\"\" md\"\"\" β bind β Slider 0.5 0.01 2.0, default 1.0, show value true γ bind γ Slider 0.5 0.01 2.0, default 0.1, show value true \"\"\" params β, γ SIR problem ODEProblem SIR, x0, 0.0, 50.0 , params sol solve SIR problem plot sol md\"\"\" It knows to plot each variable separately. We can instead plot combinations of variables in phase space or state space \"\"\" plot sol, idxs 1, 2 , xlabel \"s\", ylabel \"i\", arrow true, xlims 0.1, 1.0 , size 500, 300 md\"\"\" And even in 3D \"\"\" let plotly p plot sol, vars 1, 2, 3 , xlabel \"s\", ylabel \"i\", zlabel \"r\" gr p end md\"\"\" The ModelingToolkit.jl https mtk.sciml.ai stable tutorials ode modeling library provides ways to make creating ODE models more intuitive, using symbolic equation objects. \"\"\" md\"\"\" Making objects into callable functions \"\"\" md\"\"\" One of the interesting things we have seen is the way that the `solution` object can be called using the normal syntax for calling functions \"\"\" solution 3.5 md\"\"\" Not all types allow this. For example, if we define a matrix \"\"\" A rand 2, 2 md\"\"\" we cannot usually call it with a vector \"\"\" A rand 2 md\"\"\" If we wanted to do so, we could, however, using the following syntax \"\"\" A Matrix x A x md\"\"\" Note that this makes objects instances of the type callable, rather than the type itself, which we can already call as a constructor to create objects of that type \"\"\" Matrix 1 2 3 4 md\"\"\" For example, if we wanted to write our own type to store the output of the Euler method, we could do something like \"\"\" begin struct SimpleEulerOutput times Vector Float64 values Vector Float64 end function soln SimpleEulerOutput t use interpolation to calculate the value at time t using `soln.times` and `soln.values` end end md\"\"\" The definition of the function makes it callable. This says that \"the way to call an object called `soln`, of type `EulerOutput`, is the following \". Note that inside the function you will need to access the `times` and `values` from inside the `soln` object, using `soln.times` and `soln.values`. Note that at the time of writing, Pluto requires that you put this call definition in the same cell as the type definition. \"\"\" md\"\"\" Digging into objects \"\"\" md\"\"\" A key feature of the `DifferentialEquations.jl` library, and of most other libraries in Julia, is the way they define and use new types . As we have seen previously, we can define new types using `struct` which store data, and then define functions which act on those types. \"\"\" md\"\"\" Let's start by looking at the `ODEProblem` type \"\"\" problem md\"\"\" To see what fields, or attributes, the object contains we can use \"\"\" fieldnames typeof problem md\"\"\" In Pluto and other interactive environments we can get the same information using `problem. TAB `, i.e. by typing the TAB key after `problem.` \"\"\" md\"\"\" As usual we can extract the data contained in the object as usual using `.` \"\"\" problem.u0 problem.tspan md\"\"\" To see everything contained in the object, we can use `dump` \"\"\" dump problem md\"\"\" This seems much more complicated than you might expect. The library is clearly doing more than just storing the data that we provide in a type The main thing that has happened is that the function we passed in has been processed by wrapping it into yet another type, `ODEFunction`. This contains information such as how to calculate the derivative of the function that can be provided for more advanced usage of the package. \"\"\" md\"\"\" Similarly we can look inside the solution object \"\"\" fieldnames typeof solution dump solution md\"\"\" The solution is even more complicated, containing not only the data that was calculated, but also all information about which algorithms were used to solve the problem and tables of coefficients for interpolation. \"\"\" md\"\"\" Parameterized types \"\"\" md\"\"\" Let's look now at the type of the DiffEq objects \"\"\" typeof problem md\"\"\" We see that indeed `problem` is an object of type `ODEProblem`, but that it also has several type parameters , which are listed inside the curly braces ` ` and ` ` \"\"\" typeof problem .parameters... md\"\"\" For example, we see that the second type parameter is of type `Tuple Float64, Float64 `, which is the type of the variable `time span` \"\"\" typeof time span md\"\"\" One of the reasons for using parameterized types like this is for efficiency Julia is fastest when it knows the exact types of every variable, since then it can generate efficient machine code. \"\"\" md\"\"\" Making parameterized types \"\"\" md\"\"\" Let's see how and why we would make a parameterized type. Let's think again about the `EulerOutput` type that we started to write above. What happens if, as in the `DifferentialEquations.jl` library, we would like to handle both scalar ODEs one single real dependent variable , and vector ODEs? We can no longer specify that the output type is a `Vector Float64 `, so we would need to leave it unspecified \"\"\" struct SimpleEulerOutput2 times values end md\"\"\" However, it turns out that we then lose efficiency speed . What we would need is two different types one in which we specify the type of `values` as `Vector Float64 `, and the other as `Vector Vector Float64 `. Julia provides a mechanism to define both at once this is what parameterized types do \"\"\" md\"\"\" Let's define our own `MyODEProblem` type as a simple example. We specify type parameters for each variable \"\"\" struct MyODEProblem T,U t0 T tfinal T u0 U end md\"\"\" Note that the starting and final times have been specified to require the same type `T`. \"\"\" md\"\"\" Now if we create objects of this type, we see that Julia matches the types we pass in to the correct type parameters \"\"\" newprob MyODEProblem 3, 4, 100.0 newprob.t0 newprob.tfinal newprob.u0 md\"\"\" If we change the types of the inputs, the type parameters change \"\"\" MyODEProblem 3.0, 4.0, 100.0 md\"\"\" If we mix types for the first two arguments then we get an error, since Julia can't match to a single type `T` \"\"\" MyODEProblem 3.0, 5, 100.0 md\"\"\" We can use vectors \"\"\" MyODEProblem 3, 4, 17.0, 18.0 "},{"url":"climate_science/our_first_climate_model/","title":"Our first climate model","tags":["lecture","module3","climate","modeling","track_climate","track_math","plotting","data","ODE","differential equation","CSV","dataframe","track_data"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 3 video \"https www.youtube.com watch?v J1UsMa1cTeE\" image \"https user images.githubusercontent.com 6933510 136199705 7bdb6bb0 8698 43a1 87e6 c073ab102da5.png\" section 4 order 4 title \"Our first climate model\" layout \"layout.jlhtml\" youtube id \"J1UsMa1cTeE\" description \"\" tags \"lecture\", \"module3\", \"climate\", \"modeling\", \"track climate\", \"track math\", \"plotting\", \"data\", \"ODE\", \"differential equation\", \"CSV\", \"dataframe\", \"track data\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using DifferentialEquations using Plots, PlutoUI using LinearAlgebra using CSV, DataFrames end TableOfContents title \"📚 Table of Contents\", indent true, depth 4, aside true md\"\"\" This lecture is based on the fall 2020 \"Introduction to Climate Modeling\" lecture by Henri Drake. Henri's video https computationalthinking.mit.edu Fall20 lecture20 , Henri's original notebook https github.com mitmath 18S191 blob Fall20 lecture notebooks week11 01 energy balance model.jl where he describes the Energy Balance Model. \"\"\" md\"\"\" Pre Computational Thinking traditional ode \"analytic\" solutions \"\"\" md\"\"\" Notation ``y y t `` is a function of time t Inititally t 0 , y 0 y 0 We write ``y'`` for ``dy dt``. \"\"\" md\"\"\" ``y' `` constant ``y' a`` html\" br \" Solution ``y t at y 0`` \"\"\" md\"\"\" ``y' `` linear in y ``y' a by`` html\" br \" Solution ``y t \\frac a b e^ bt 1 y 0 e^ bt `` Comment Equilibrium obtained if b\\ne0 by solving y' 0 for y giving equilibrium y a b . Also can be obtained by letting t\\rightarrow \\infty in the solution killing the exponential terms. \"\"\" md\"\"\" ``y' `` linear in y \"forcing term\" in t ``y' a by f t `` html\" br \" Solution ``y t e^ bt \\left y 0 \\int 0^t e^ bu a f u du \\right `` \"\"\" md\"\"\" Computational Thinking \"\"\" md\"\"\" Review Solving an ODE y' f y in Julia 0. Define f y,p,t 1. ODEProblem f, f 0 , time span, parameters 2. solve 3. plot etc \"\"\" f y, a, b, forcing c ,t a b y forcing c t forcing c t c t md\"\"\" a bind a Slider 0 .01 10, show value true, default 0 b bind b Slider 0 .1 5, show value true, default 0 y₀ bind y₀ Slider 5 .1 15, show value true, default 2.0 c bind c Slider 0 .1 5, show value true, default 0.0 \"\"\" sol solve ODEProblem f, y₀, 0, 10.0 , a, b, forcing c y₀ begin p plot sol , legend false, background color inside black , ylims 0, 10 , lw 3, c red plot direction field xs Float64 ys Float64 lrx LinRange xlims p ..., 30 for x in lrx for y in LinRange ylims p ..., 30 v 1, a b y forcing c x v . 20 lrx 2 lrx 1 plot x, x v 1 , y, y v 2 , alpha 0.5, c gray push xs, x v 1 , x v 1 , NaN push ys, y v 2 , y v 2 , NaN end end hline b 0 ? 0 a b ,c white,ls dash plot xs, ys, alpha 0.7, c yellow ylabel \"y\" annotate .5,y₀,text \"y₀\",color red title \"Solution to y' t a by forcing c t \" end md\"\"\" Background climate physics The simplest climate model can be conceptualized as ```math \\begin align \\text \\color brown change in heat content & \\text \\color orange absorbed solar radiation energy from the Sun's rays \\newline & \\text \\color blue outgoing thermal radiation i.e. blackbody cooling to space \\newline & \\text \\color grey human caused greenhouse effect trapped outgoing radiation \\end align ``` where each of these is interpreted as an average over the entire globe hence \"zero dimensional\" . \"\"\" html\"\"\" img src \"https raw.githubusercontent.com hdrake hdrake.github.io master figures planetary energy balance.png\" height 225 \"\"\" md\"\"\" 1.1 Incoming 🌞 Absorbed solar radiation an example of \\mathrm temp ' constant \"\"\" md\"\"\" Heating the earth nonstop \"\"\" md\"\"\" At Earth's orbital distance from the Sun, the power of the Sun's rays that intercept the Earth is equal to \"\"\" S 1368 solar insolation W m^2 energy per unit time per unit area md\"A small fraction\" α 0.3 albedo, or planetary reflectivity unitless md\"\"\" In math we just write down a differential equation, but in the physical world there are physical variables to identify. In our baking the earth example, we will identify the following quantities Industrial Revolution Start 1850 Avg Temperature in 1850 14.0 °C Solar Insolation S 1368 W m^2 energy from the sun Albedo or plentary reflectivity α 0.3 atmosphere and upper ocean heat capacity C 51 J m^2 °C Earth Baking Formula html\" br \" `` C\\ \\mathrm temp ' t S 1 α 4 `` round S 1 α 4 sigdigits 4 \"\"\" md\"\"\" of this incoming solar radiation is reflected back out to space by reflective surfaces like white clouds, snow, and ice , with the remaining fraction 1 \\alpha being absorbed. Since the incoming solar rays are all approximately parallel this far from the Sun, the cross sectional area of the Earth that intercepts them is just a disc of area \\pi R^ 2 . Since all of the other terms we will consider act on the entire surface area 4\\pi R^ 2 of the spherical Earth, the absorbed solar radiation per unit surface area averaged over the entire globe is reduced by a factor of 4. https www.open.edu openlearn ocw pluginfile.php 101161 mod oucontent oucontent 890 639dcd57 ce3f1c3a s250 3 002i.jpg The absorbed solar radiation per unit area is thus \\textcolor orange \\text absorbed solar radiation \\equiv \\frac S 1 \\alpha 4 \"\"\" absorbed solar radiation S 1 α 4 W m^2 begin C 51. atmosphere and upper ocean heat capacity Wyr m^2 °C temp₀ 14.0 preindustrial temperature °C end p1 ODEProblem temp, p, t 1 C absorbed solar radiation, temp₀, 0.0, 170 begin plot solve p1 , legend false, background color inside black, xlabel \"years from 1850 \", ylabel \"Temperature °C\" hline temp₀,temp₀ ,c white,ls dash annotate 80, 25 temp₀, text \"Preindustrial Temperature temp₀ °C\",color white title \"Absorbing Solar Radiation only \" end md\"\"\"The heat content C temp is determined by the temperature temp in Kelvin and the heat capacity of the climate system. While we are interested in the temperature of the atmosphere, which has a very small heat capacity, its heat is closely coupled with that of the upper ocean, which has a much larger heat capacity of \"\"\" md\"\"\" The change in heat content over time is thus simply given by \\frac d CT dt . Since the heat capacity of sea water hardly changes with temperature, we can rewrite this in terms of the change in temperature with time as \\color brown \\text change in heat content \\ C \\frac dtemp dt \"\"\" md\"\"\" 1.2 Outgoing ♨ thermal radiation \"\"\" md\"\"\" The outgoing thermal radiation term \\mathcal G T or \"blackbody cooling to space\" represents the combined effects of negative feedbacks that dampen warming , such as blackbody radiation , and positive feedbacks that amplify warming , such as the water vapor feedback . Since these physics are too complicated to deal with here, we linearize the model combining the incoming and the outgoing. We assume that the preindustrial world was in energy balance, and thus the equilibrium temperature is the preindustrial temperature. Thus we assume temp' t B temp 0 temp t for some value of B . The minus sign in front of temp t indicating it restores equilibrium. \"\"\" md\"\"\" The value that has been chosen is \"\"\" B 1.3 climate feedback parameter W m^2 °C , md\"\"\" start\\ temp bind start temp Slider 0 28 show value true, default 14 \"\"\" p2 ODEProblem temp, p, t 1 C B temp₀ temp , start temp, 0.0, 170 begin plot solve p2 , legend false, background color inside black, xlabel \"years from start\", ylabel \"Temperature °C\", ylim 0, 30 hline temp₀,temp₀ ,c white,ls dash annotate 80, temp₀, text \"Preindustrial Temperature temp₀ °C\", bottom,color white title \"Energy Balance Model Healthy Earth \" end md\"\"\" 1.3 Greenhouse 🏭 Human caused greenhouse effect Empirically, the greenhouse effect is known to be a logarithmic function of gaseous carbon dioxide CO₂ concentrations \\color grey \\text human caused greenhouse effect \\ \\mbox forcing\\ coef \\ln \\left \\frac \\text CO ₂ \\text CO ₂ \\text PreIndust \\right , How this depends on time into the future depends on human behavior Time is not modelled in the above equation. \"\"\" md\"where\" forcing coef 5.0 CO2 forcing coefficient W m^2 CO₂ PreIndust 280. preindustrial CO2 concentration parts per million ppm greenhouse effect CO₂ forcing coef log CO₂ CO₂ PreIndust begin CO2 present 420. CO2 range 280 2 .^ range 1, stop 3,length 100 plot CO2 range, greenhouse effect. CO2 range , lw 2.5, label nothing, color black plot CO₂ PreIndust , greenhouse effect CO₂ PreIndust , marker circle, ms 6, linecolor white, color blue, lw 0, label \"pre industrial PI \" plot CO2 present , greenhouse effect CO2 present , marker circle, ms 6, color red, linecolor white, lw 0, label \"present day 2020 \" plot xticks 280, 280 2, 280 4, 280 8 , legend bottomright, size 400, 250 plot ylabel \"Radiative forcing W m² \", xlabel \"CO₂ concentration ppm \" end begin CO₂ t CO₂ PreIndust no emissions CO₂ t CO₂ PreIndust 1.01^t test model CO₂ t CO₂ PreIndust 1 t 220 ^3 end greenhouse effect CO₂ 15 p3 ODEProblem temp, p, t 1 C B temp₀ temp greenhouse effect CO₂ t , start temp, 0.0, 170 begin plot solve p3 , legend false, background color inside black, xlabel \"years from 1850\", ylabel \"Temperature °C\", ylim 10, 20 hline temp₀,temp₀ ,c white,ls dash annotate 80, temp₀, text \"Preindustrial Temperature temp₀ °C\", bottom,color white title \"Model with CO₂\" end begin years 1850 2030 plot years, CO₂. years. 1850 , lw 3, legend false xlabel \"year\" ylabel \"CO₂ ppm \" end md\"\"\" Observations from Mauna Loa Volcano Mauna Loa Volcano https i.pinimg.com originals df 1a e7 df1ae72cfd5e6d0d535c0ec99e708f6f.jpg information is available at https www.ncei.noaa.gov pub data paleo icecore antarctica law law2006.txt https www.ncei.noaa.gov pub data paleo icecore antarctica law law2006.txt . \"\"\" CO2 historical data url \"https gml.noaa.gov webdata ccgg trends co2 co2 mm mlo.csv\" CO2 historical path download CO2 historical data url begin offset findfirst startswith \" \" , readlines CO2 historical path CO2 historical data raw CSV.read CO2 historical path, DataFrame header offset, skipto offset 1, first CO2 historical data raw, 11 end md\"\"\" Data is in the column `\"average\"`. \"\"\" md\"\"\" Oh no, missing data 99.99 \"\"\" validrowsmask CO2 historical data raw , \"average\" . 0 CO2 historical data CO2 historical data raw validrowsmask, begin plot CO2 historical data , \"decimal date\" , CO2 historical data , \"average\" , label \"Mauna Loa CO₂ data Keeling curve \" plot years, CO₂. years. 1850 , lw 3 , label \"Cubic Fit\", legend topleft title \"CO₂ observations and fit\" end md\"\"\" We will use this fit to compare against historical temperatures. \"\"\" md\"\"\" Climate feedback BB bind BB Slider 0 .1 4, show value true, default B Ocean Heat Capacity CC bind CC Slider 10 .1 200, show value true, default C \"\"\" p4 ODEProblem temp, p, t 1 CC BB temp₀ temp greenhouse effect CO₂ t , start temp, 0.0, 170 md\"\"\" Best and worst case projections of future global warming \"\"\" md\"\"\"Consider two divergent hypothetical futures 1. a low emissions world in which emissions decrease such that CO2 concentrations stay below 500 ppm by 2100 known in climate circles as \"RCP2.6\" and 2. a high emissions world in which emissions continue increasing and CO2 concentrations soar upwards of 1200 ppm \"RCP8.5\" . \"\"\" md\"\"\" https raw.githubusercontent.com mitmath 18S191 Spring21 notebooks week12 predictthefuture.svg \"\"\" md\"\"\" In the low emissions scenario, the temperature increase stays below ΔT 2 °C by 2100, while in the high emissions scenario temperatures soar upwards of 3.5ºC above pre industrial levels. \"\"\" md\"Although the greenhouse effect due to human caused CO₂ emissions is the dominant forcing behind historical and future projected warming, modern climate modelling considers a fairly exhaustive list of other forcing factors aerosols, other greenhouse gases, ozone, land use changes, etc. . The video below shows a breakdown of these forcing factors in a state of the art climate model simulation of the historical period.\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid E7kMr2OYKSU params \"modestbranding 1&rel 0\" lite youtube \"\"\" solp4 solve p4 begin T url \"https data.giss.nasa.gov gistemp graphs graph data Global Mean Estimates based on Land and Ocean Data graph.txt\" T df CSV.read download T url ,DataFrame, header false, skipto 6,delim \" \" T df T df , 1,6 end begin plot years,solp4. years. 1850 ,lw 2,label \"Predicted Temperature from model\", legend topleft xlabel \"year\" ylabel \"Temp °C\" plot parse. Float64, T df ,1 , parse. Float64, T df ,2 . 14.15, color black, label \"NASA Observations\", legend topleft end "},{"url":"homework/hw1/","title":"sample homework","tags":["module2","track_julia","track_material","homeworks","pluto","PlutoTeachingTools"],"text":" A Pluto.jl notebook v0.19.25 frontmatter homework number \"1\" order \"2.5\" title \"sample homework\" tags \"module2\", \"track julia\", \"track material\", \"homeworks\", \"pluto\", \"PlutoTeachingTools\" layout \"layout.jlhtml\" description \"sample howework\" using Markdown using InteractiveUtils using PlutoTeachingTools, PlutoUI md\"\"\" Sample Homework This notebook showcases some of the features of `PlutoTeachingTools.jl` https github.com JuliaPluto PlutoTeachingTools.jl and how to use these to write homework assignment in Pluto. \"\"\" tip md\"\"\"For a deeper tour of `PlutoTeachingTools.jl`, check their documentation https juliapluto.github.io PlutoTeachingTools.jl example.html \"\"\" md\"\"\" Useful functionalities `PlutoTeachingTools.jl` has some functions like `correct`, `still missing`, here a few demoes \"\"\" correct still missing keep working keep working md\"you can also give custom text to the boxes\" hint md\"this is a hint, hover the box to unblur the text\" md\"\"\" Exercise 1 a simple exercise Replace missing with the value `1`. \"\"\" x missing if ismissing x still missing elseif x 1 && x isa Int correct elseif x 1 && x isa Int b1 almost md\"\"\"Your variable has the right value, but it's not quite the right answer. Read carefully the instructions\"\"\" b2 hint md\"\"\"What type should the value of x be?\"\"\" md\"\"\" b1 b2 \"\"\" else keep working md\"\"\"That is not the right answer Keep trying \"\"\" end md\"\"\" here is a short demo of how it looks like when the student tries to solve the exercise \"\"\" Resource \"https user images.githubusercontent.com 49938764 249749643 8cc12de3 2b50 4182 b95d 686c2c18332c.mov\", width 500, autoplay \"\", loop \"\" md\"\"\" Exercise 2 Write a function called `myfun` that takes as input an integer and returns its square. Define a variable called `y` and assign `myfun 3 ` to it. \"\"\" let if isdefined myfun func not defined myfun else test values 1, 2, 3, 4, 5 msg1 correct for t in test values if myfun t t^2 msg1 keep working md\"Test failed for input t, expected t^2 , but got myfun t \" break end end msg1 end end if isdefined y var not defined y elseif y 9 correct else keep working md\"Evaluated expression y y is incorrect.\" end md\"\"\" and here is a quick demo of the exercise in action \"\"\" Resource \"https user images.githubusercontent.com 49938764 249748007 d0b2d773 6b21 49d4 89db ad737af510fe.mov\", width 500, autoplay \"\", loop \"\" "},{"url":"mod1_setup_website/basic_info/","title":"Fill course basic information","tags":["module1","track_setup","teaching","metadata"],"text":"Add basic information If you look at the homepage of the template website, you will see it has a bunch of placeholder text, such as “name of your course”, “a short catchy phrase” etc. To customize this, you will need to customize the  metadata  of the website. That is, add basic info for your class. To do so, you will need to fill the info in the files under the folder  src/_data . Let us analyze these one by one. course_info.jl This file contains a julia  Dict  with the basic info of the class. For each key ( course_name ,  course_subtitle , etc.) replace the corresponding placeholder with an appropriate text for your class. When filling the  institution_logo  data with the name of your university logo file, do not forget to actually put the file under  src/assets . Authors are listed as a vector of pairs, where the first element is the author name and the second is their homepage address. If you dont have a homepage address for the author, put an empty string  \"\" . homepage.jl This file contains metadata for the info displayed in the homepage, particularly title : the title displayed on top of the homepage disclaimer : the disclaimer displayed below the title. If you don’t want a disclaimer, you can remove this entry. highlights : in this entry you can specify the highlights of your class, which will be displayed on the homepage. This entry should be a vector of highlights. Each entry in the vector should be a dict with the following fields\n name : the title of the highlight text : short description of the highlight img : link to an image summarizing the highlight sidebar.jl In this file you can specify the sidebar of the website. All lecture materials will be grouped in  modules  in the sidebar, which are defined in this file. The modules in the file are specified as a vector of pairs, in the form module_id => module_title\n for example \"module1\" => \"Week 1: Introduction to the class\"\n To link a file to a module, you will need to add the module identifier in the page tags. For more info about this, see  Add frontmatter tracks.jl In this file you will specify tracks. Tracks can be used to group lectures across modules, e.g. if they have a commmon theme. When a track is selected on the sidebar, only the pages\nbelonging to that track will be highlighted. Similar to modules, tracks are stored in a vector of pairs in the form track_id => track_title\n for example \"julia\" => \"💻 Julia programming\"\n To link a file to a track, you will need to add the track id, prefixed with  track_ , to the tags of the page. For example, to add a lesson to the julia track defined above, you would add the tag  track_julia  to the tags of that lesson file. License Choosing an appropriate license is important to make your material properly reusable. For text, popular licenses are  Creative Commons , for example  CC BY-SA 4.0 For code, an  OSI open source license  is recommended. For example  MIT  or  Apache 2.0  license. To add the license, open the file  LICENSE.md  and replace the text <insert license for your material judge>\n with your license(s)."},{"url":"mod1_setup_website/getting_started/","title":"Getting started","tags":["module1","track_setup","teaching","repository structure"],"text":"Fork the template Go to the  template repository  and click  Use this template  on the top-right corner. This will fork the repository under your github profile. Folder structure Let us have a look at what this repository looks like. The most important folder, where you will be mainly working is  src . Here you will place all your lecture materials. So let us take a closer look at this. Opening the  src  folder, you will see the following _data  folder: here you will place metadata about your website (university name, class semester, define tracks, etc.), more on this in the next lesson. _include : This folder contains the layout templates that are used to generate the final pages on your website. Unless you want to tweak the layout, you will not need to modify this. assets : in this folder you can place all attachements, such as your university logo and other pictures. The folder also contains the CSS and scripts used to render the website. That was for the “infrastructure part” of the website, the rest is content! To add new pages to your website, simply them under the  src  folder. You can group them in subfolders, as done in this template, but that is not a strict requirement. When downloading this template, you will get the following material: installation.md : this page contains instructions on how to install Julia and Pluto. If you find it useful, you may keep it as is, or edit to match your wanted installation instructions. cheatsheets.md : contains a list of julia related resources. Again, you can keep it or remove it. logistics.md : empty markdown page, where you can describe the logistics of your class index.jlmd : this is used to render the homepage.  Do not remove or modify this! search.md : this is used to render the search tab on the sidebar, do not modify or remove this file. The remaining folders mod1_setup_website mod2_add_material mod3_publish_website homework are placeholder samples, used to showcase what a deployed website looks like. As a bonus, these placeholder files actually document how to use this template.  You can read it and see what the final result looks like on the  template webpage . When starting adding your course material, you will most likely want to remove these."},{"url":"mod1_setup_website/working_locally/","title":"Working locally","tags":["module1","track_setup","track_julia","PlutoSliderServer","pluto"],"text":"Working locally Open this repository in VS Code, and install the recommended extensions. To start running the development server, open the VS Code  command palette  (press  Cmd+Shift+P ), and search for  Tasks: Run Task , then  PlutoPages: run development server . The first run can take some time, as it builds up the notebook outputs cache. Leave it running. This will start two things in parallel: the PlutoPages.jl notebook (which generates the website), and a static file server (with Deno_jll). It will open two tabs in your browser: one is the generation dashboard (PlutoPages), the other is the current site preview (Deno_jll). Whenever you edit a file, PlutoPages will automatically regenerate! Refresh your browser tab. If it does not pick up the change, go to the generation dashboard and click the “Read input files again” button. Note! : This workflow is recommended for writing static content, styles, and for site maintenance. But for writing Pluto notebooks, it’s best to prepare the notebook first, and then run the site (because it re-runs the entire notebook on any change)."},{"url":"mod2_add_material/add_markdown/","title":"Add markdown files","tags":["module2","track_material","markdown","frontmatter"],"text":"Add markdown files If your lecture does not need to run code or use interactivity. You can write it as a markdown file. As an extra twist, you can evaluate julia code inside a  $  symbol. For example, $(1 + 1)\n will become 2 Add Front-matter For each file, markdown or pluto, you will need to add a  front-matter , which specifies the page metadata. For markdown files, the front-matter is specified at the top of the file between three dashes  --- . For example, the front-matter of this file is ---\ntitle: \"Add markdown file\"\norder: 1\nchapter: 2\nsection: 1\nlayout: \"md.jlmd\"\ntags: [\"module2\", \"track_material\", \"markdown\", \"frontmatter\"]\n---\n You will need to specify the following attributes title : title of the page order : the position of the page in the module on the sidebar.  Hint! : You can also use fractional numbers, e.g.  1.5 . This can be handy for homeworks, so you can include the homework between the first and second lesson without messing up lessons counting. layout : set to  \"md.jlmd\" , unless you are using some custom layout chapter  and  section  (optional): used to number the page. If for example  chapter=1  and  section=2 , the page will be displayed as  1.2  on the sidebar and page header. image  (optional): link to summarizing image to display in the  subjects  section on the homepage. If left empty, the page wont be included in the subjects section. If no page has an  image  field in the front-matter, the subjects section is not displayed. description  (optional): short description of the notebook youtube_id  (optional): youtube id of the video associated with the page. If included, the page header will embed the youtube video. homework_number : needed only for homeworks, the number of the homework tags : list of keywords for the page. It should at least include the module name, as defined in  _data/sidebar.jl  to include the page in the sidebar. You can also associate pages to a given track by adding the track id, prefixed with  track_  to the tags. For example, if you want to include the page in the julia track, add  track_julia  in the tags list. Markdown 101 If you are not familiar with markdown, you can see for example  here . Here is a quick and dirty cheatsheet Use  #  for headers, for example # Header\n## Subheader\n### Sub-sub-header\n You can create links with the syntax [text](adddress)\n For example the link to the mardown tutorial above was typed as [here](https://www.markdowntutorial.com/)\n You can insert pictures with the syntax ![optional alternative text](link-to-picture)\n for example ![](https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/master/images/julia-logo-color.png)\n will give"},{"url":"mod2_add_material/add_pluto/","title":"Add Pluto notebooks","tags":["module2","track_julia","track_material","Pluto","PlutoUI"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 2 section 2 order 2 image \"https raw.githubusercontent.com fonsp Pluto.jl 580ab811f13d565cc81ebfa70ed36c84b125f55d demo plutodemo.gif\" title \"Add Pluto notebooks\" tags \"module2\", \"track julia\", \"track material\", \"Pluto\", \"PlutoUI\" layout \"layout.jlhtml\" using Markdown using InteractiveUtils using PlutoTeachingTools, PlutoUI TableOfContents md\"\"\" Add Pluto notebooks Pluto.jl https plutojl.org is a revolutionary text editor for reactive and interactive programming. To start creating a Pluto notebook, open a terminal and launch Julia, then do ```julia using Pluto Pluto.run ``` This will launch a Pluto session, where you can write your notebook. To add the front matter, you can use Plut FrontmatterGUI, as the following short video clip shows. danger md\"For pluto notebooks, you will need to set layout to layout.jlhtml\" \"\"\" html\"\"\" video controls \"controls\" width \"800\" height \"600\" name \"Video Name\" source src \"https user images.githubusercontent.com 6933510 207080363 b912d591 f6f6 4522 a6fe 701e5ab04f0b.mov\" video \"\"\" md\"\"\" Pluto 101 Pluto is a notebook for Julia It is reactive , lightweight and has powerful interactivity tools . This will allow you to make your lesson material more engaging for students. Here are a few highlights of Pluto. tip md\" To learn more, check out Pluto featured notebooks https featured.plutojl.org , the JuliaCon video at the beginning of this notebook, or the presentations at PlutoCon 2021 https www.youtube.com playlist?list PLP8iPy9hna6T5sNOTeGdiqygHe 09geEW .\" Writing code in Pluto In Pluto code is written in cells, to add some code, simply create a new cell and type in. Each cell should contain 1 julia expression function definition, if statement, variable assignment, etc. . ```julia if rand 0.5 \"hi\" else \"there\" end ``` or ```julia a 1 ``` or ```julia function f return rand ^ 2 end ``` However , multiple expressions in the same cell are not allowed, for example ```julia a 1 b 2 a b ``` cannot be written in the same cell. You have two alternatives 1. Split it into multiple cells recommended to make reactivity better . 2. Wrap your staments inside a `begin ... end` or `let ... end` block. The difference is that the latter introduces a local scope, hence variables defined inside `let` are not visibles from outside. Reactivity Pluto is reactive This means that if you define a variable `a` in a cell, when you edit the variable value, all cells depending on that variable are automatically re evaluated. A few notes 1. As mentioned above, better to have a single variable assignment per cell, this will make the dependency graph slimmer and reactivity smoother. 2. Code modifying a given variable should be in the same cell, i.e. you cannot have two cells modifying the same variable. Here is a summarizing demo \"\"\" Resource \"https raw.githubusercontent.com fonsp Pluto.jl 580ab811f13d565cc81ebfa70ed36c84b125f55d demo plutodemo.gif\", width 350 md\"\"\" Built in environment Pluto is designed with reproducibility in mind To use packages registered in the Julia general registry, just type `using MyPackage` in some cells, as done at the beginning of this notebook. Pluto will automatically download the package The `Project.toml` and `Manifest.toml` what Julia uses to record all libraries, their versions and dependencies are stored inside the notebook, making it fully batteries included Resource \"https user images.githubusercontent.com 6933510 134823403 fbb79d7f dd3e 4712 b5d5 b48ad0770f13.gif\", width 400 \"\"\" md\"\"\" Interactivity Pluto has great support to make your notebooks interactive It allows you to associate variables with sliders and buttons that you can use to interactively change the result of the code. https user images.githubusercontent.com 6933510 136196607 16207911 53be 4abb b90e d46c946e6aaf.gif The easiest way to harness the power of Pluto interactivity is to use PlutoUI.jl https github.com juliapluto PlutoUI.jl , which is showcased in the next lecture https juliapluto.github.io mod2 add material plutoui showcase . \"\"\" "},{"url":"mod2_add_material/plutoui_showcase/","title":"PlutoUI showcase","tags":["module2","track_julia","track_material","Pluto","PlutoUI","interactivity"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter \"2\" image \"https user images.githubusercontent.com 6933510 174067690 50c8128d 748b 4f50 8a76 2ce18166642b.png\" order \"3\" section \"3\" title \"PlutoUI showcase\" tags \"module2\", \"track julia\", \"track material\", \"Pluto\", \"PlutoUI\", \"interactivity\" layout \"layout.jlhtml\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end using PlutoUI md\"\"\" PlutoUI.jl Pluto notebooks can use ` bind` to add interactivity to your notebook. It's a simple concept it uses the same reactivity that you have when editing code, except now you use sliders and buttons, instead of editing code. This notebook showcases some features of `PlutoUI.jl` , which allows you to easily add interactivity to your notebooks. This notebook is from Pluto featured notebooks https featured.plutojl.org , make sure to also check the others to learn more cool Pluto tricks \"\"\" md\"\"\" To use it in other notebooks Simply import the `PlutoUI` package, and Pluto's built in package manager takes care of the rest \"\"\" TableOfContents This is all you need to get a nice table of content md\"\"\" Basics \"\"\" md\" Slider\" bind x Slider 5 15 x md\"The first argument is a `Vector` or range. You can set the default value using a keyword argument \" bind y Slider 20 0.1 30, default 25 y md\"\"\" Scrubbable `Scrubbable` makes a number interactive, you can click and drag its value left or right. Try it in the text below \"\"\" md\"\"\" If Alice has bind a Scrubbable 20 apples, and she gives bind b Scrubbable 3 apples to Bob... \"\"\" md\"\"\" ...then Alice has a b apples left. \"\"\" md\"\"\" Use the Live Docs to learn more about `Scrubbable` \"\"\" md\" NumberField A `NumberField` can be used just like a `Slider`, it just looks different \" bind x different NumberField 0 100, default 20 md\" CheckBox\" bind z CheckBox z md\"Default value \" bind having fun CheckBox default true having fun having fun ? md\"🎈🎈\" md\"☕\" md\" TextField\" bind s TextField s md\"With a default value \" bind sentence TextField default \"te dansen omdat men leeft\" sentence md\"You can also create a multi line text box \" bind poem TextField 30, 3 , \"Je opent en sluit je armen,\\nMaar houdt niets vast.\\nHet is net zwemmen\" poem by Sanne de Kroon split poem, \"\\n\" md\" Select\" bind vegetable Select \"potato\", \"carrot\" vegetable bind favourite function Select sin, cos, tan, sqrt favourite function 2 md\"Instead of an array of values, you can also give an array of pairs , where the first item is the bound value, and the second item is displayed. \" bind fruit Select \"apple\" \"🍎\", \"melon\" \"🍉\" fruit md\"\"\" MultiSelect This widget allows the user to select multiple element by holding `Ctrl` `Cmd` while clicking a more items. \"\"\" bind vegetable basket MultiSelect \"potato\", \"carrot\", \"boerenkool\" vegetable basket md\"Just like `Select`, you can also give an array of pairs.\" md\"\"\" MultiCheckBox This widget allows the user to select multiple elements using checkboxes. \"\"\" bind fruit basket MultiCheckBox \"apple\", \"blueberry\", \"mango\" fruit basket md\"\"\" You can use `MultiSelect` and `MultiCheckBox` with any vector of objects, not just strings \"\"\" bind my functions MultiCheckBox sin, cos, tan f π for f in my functions md\"Just like `Select`, you can also give an array of pairs. See the Live Docs for `MultiCheckBox` for all the customization options \" md\" Button\" bind clicked Button \"Hello world\" clicked md\"\"\" Button as reactive trigger In the example above, any cell that references `clicked` will re evaluate when you click the button. This means that you can a button as a reactive trigger , by referencing its value in another cell. \"\"\" bind go Button \"Recompute\" let go md\"I am rand 1 15 years old \" end md\" FilePicker\" bind important document FilePicker important document md\"The file picker is useful if you want to show off your notebook on a dataset or image uploaded by the reader . It will work anywhere you don't access files using their path. The caveat is that large files might take a long time to get processed everything needs to pass through the browser. If you are using large datasets, a better option is to use `Select` to let the reader pick a filename. You can then read the file using `Base.read filename, type `\" md\" Extras\" md\" Clock\" bind t Clock t md\"You can set the interval `5.0` seconds , and disable the UI `true` \" bind t slow Clock 5.0, true t slow md\"You can use a `Clock` to drive an animation Or use it to repeat the same command at an interval just like with `Button`, you can reference a bound reactive variable without actually using it \" md\" DownloadButton\" md\"\"\" The download button is not an input element that you can ` bind` to, it's an output that you can use to get processed data from your notebook easily. The second argument is the output filename . \"\"\" DownloadButton poem, \"poem.txt\" DownloadButton 0x01, 0x02, 0x03 , \"secret data.bin\" md\"\"\" High level inputs \"\"\" md\"\"\" Confirm Normally, when you move a `Slider` ref or type in a `TextField` ref , all intermediate values are sent back to ` bind`. By wrapping an input element in `confirm`, you get a button to manually control when the value is sent , intermediate updates are hidden from Pluto. \"\"\" bind distance confirm Slider 1 100 distance md\"\"\" `confirm` can be wrapper around any input element to create a new one, including inputs from other packages, or inputs that you have made yourself \"\"\" md\"\"\" Combine This next high level component is a bit tricky, but very powerful Using `combine`, you can create a single input out of multiple existing ones In the example below, we create a new input, `wind speed input` . Notice that the list of wind directions is dynamic if you add a new direction, a 5th slider will appear \"\"\" import PlutoUI combine function wind speed input directions Vector return combine do Child inputs md\"\"\" name Child name, Slider 1 100 \"\"\" for name in directions md\"\"\" Wind speeds inputs \"\"\" end end bind speeds wind speed input \"North\", \"East\", \"South\", \"West\" speeds speeds.North md\"\"\" Use the Live Docs to learn more about `combine` and to see additional examples. 🙋 `combine` is very useful in combination with HypertextLiteral.jl https github.com MechanicalRabbit HypertextLiteral.jl , which you can learn using our JavaScript sample notebook. \"\"\" md\"\"\" Loading resources Notebooks use data from different places. For example, you use `Base.read` https docs.julialang.org en v1 base io network ~ text read filename%3A%3AAbstractString%2C%20String to access local data files inside your Julia code, and `Downloads.jl` https github.com JuliaLang Downloads.jl for remote data interwebs . `PlutoUI` helps you communicate with the person reading the notebook To get remote media URL inside your Markdown text , use `PlutoUI.Resource`. To get local media file inside your Markdown text , use `PlutoUI.LocalResource`. With media , we mean images , video and audio. We strongly recommend that you use remote media inside Pluto notebooks If your notebook uses local images, then those images will not show when someone else opens your notebook, unless they have the same images on their computer, at the exact same location. More on this later. \"\"\" md\"\"\" Resource If you just want to show images inside Markdown , you can use the built in syntax without `PlutoUI` ``` md\"Here is a dog https fonsp.com img doggoSmall.jpg \" ``` `PlutoUI.Resource` has some extra features specify image dimensions and spacing support for videos support for audio\"\"\" dog url \"https upload.wikimedia.org wikipedia commons thumb 1 15 Welsh Springer Spaniel.jpg 640px Welsh Springer Spaniel.jpg\" Resource dog url, width x x different t rex url \"https upload.wikimedia.org wikipedia commons transcoded 6 62 Meow.ogg Meow.ogg.mp3\" flower url \"https upload.wikimedia.org wikipedia commons 4 41 Sunflower Flower Opening Time Lapse.ogv\" md\"\"\"Hello I am a dog Resource dog url \"\"\" md\"\"\"And I sound like this Resource t rex url \"\"\" md\"\"\"This is my flower friend Resource flower url, width 200 \"\"\" md\" Attributes You can pass additional HTML attributes to `Resource`, these will be added to the element. For example \" md\"\"\" Resource dog url, width 20 Resource dog url, width 50 Resource dog url, width 100 Resource dog url, width 100, style \"filter grayscale 100% border 3px solid black \" \"\"\" Resource flower url, width 200, autoplay \"\", loop \"\" md\" YouTube, Vimeo, etc. If you use `Resource` for video, the URL has to point to a video file like `.mp4` or `.mov` . Popular video sites don't give you that link, instead, you can use their embed codes . You can find these inside the video player, by right clicking or using the menu buttons. You then use that inside an HTML block ``` html\\\"\\\"\\\" ~ paste embed code here ~ \\\"\\\"\\\" ``` You might need to change the `width` to `100%` to make it fit.\" html\"\"\" div style \"padding 56.25% 0 0 0 position relative \" iframe src \"https player.vimeo.com video 438210156\" style \"position absolute top 0 left 0 width 100% height 100% \" frameborder \"0\" allow \"autoplay fullscreen\" allowfullscreen iframe div script src \"https player.vimeo.com api player.js\" script \"\"\" md\" LocalResource not recommended The examples above use `Resource` to make media from a URL available inside Markdown. To use local files , simply replace `Resource` with `LocalResource` , and use a file path instead of a URL.\" html\" span style 'font family cursive color purple ' I really hope that this works span \" md\"\"\"Hello I am a dog LocalResource \"C \\\\Users\\\\fons\\\\Pictures\\\\hannes.jpg\" \"\"\" md\"\"\" html\" span style 'font family cursive color purple ' OOPS span \" , it didn't html\" br \" Here are two tips for getting local images to work correctly 1. Go to imgur.com https imgur.com and drag&drop the image to the page. Right click on the image, and select \"Copy image location\". You can now use the image like so ```PlutoUI.Resource \"https i.imgur.com SAzsMMA.jpg\" ``` 2. If your notebook is part of a git repository, place the image in the repository and use a relative path ```PlutoUI.LocalResource \".. images cat.jpg\" ``` \"\"\" md\" Why does it have to be so difficult? Pluto only stores code in the notebook file, not images. This minimal file format is very valuable, but it means that images need to be addressed , not stored. Addressing local files is fragile if someone else opens the notebook, or if you move the notebook to a different folder, that image file needs to be available at exactly the same path. This is difficult to do correctly, and if it works for you, it is hard to tell if it will work for someone else. Putting images online might be a hassle, but once it works, it will work everywhere The stateless nature of URLs means that the images will work regardless of how the notebook file is accessed, while keeping a minimal file format.\" md\" PlutoUI without Pluto Huh? Did you know that you can run Pluto notebooks without Pluto ? If your notebook is called `wow.jl`, then ```sh julia wow.jl ``` will run the notebook just fine. When you use ` bind`, your notebook can still run without Pluto Sort of. Normally, all bound variables are assigned the value `missing` when you run it elsewhere. However, the `PlutoUI` types have all been configured to assign a more sensible default value. For example, if your notebook contains ```julia bind x Slider 10 20 ``` and you run it without Pluto, then this statement simply assigns `x 10`. \" md\"`Pluto` and `PlutoUI` work independently of each other In fact, you could write a package with fun input elements, or add ` bind`able values to existing packages.\" md\" Appendix\" space html\" br br br \" space space space space space "},{"url":"mod3_publish_website/deploy_static/","title":"Deploy your website as static","tags":["module3","track_setup","deploy","netlify","github actions","github pages"],"text":"Deploying with github pages Deploying your website as static page with github pages is a breeze. Whenever you push to main, the website will be deployed to a branch called  gh-pages . All you need to do is go to your repository and from  Settings > Pages  choose to deploy from  gh-pages  branch, as the following picture shows. After that, the website will be available at https://yourusername.github.io/your-repository-name\n Note that this is a  static  webpage, so sliders will not work. Students will still be able to play with interactivity by downloading the notebook or running it on binder. If you want interactivity to work on the webpage, you can either Precompute the notebooks outputs  (experimental) or Run your own server"},{"url":"mod3_publish_website/precompute_output/","title":"Precompute the pluto notebooks","tags":["module3","track_setup","track_julia","deploy","precompute","Pluto","PlutoSliderServer"],"text":"COMING SOON"},{"url":"mod3_publish_website/setup_server/","title":"Setup a server for your website","tags":["module3","track_setup","deploy","server","dynamic","droplet"],"text":"COMING SOON"}]